{
  "statistics": {
    "detectionDate": "2025-05-31T23:47:58.983Z",
    "formats": {
      "typescript": {
        "sources": {
          "server/src/utils/logger.ts": {
            "lines": 25,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/utils/headerAliases.ts": {
            "lines": 94,
            "tokens": 597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/utils/csvParser.ts": {
            "lines": 423,
            "tokens": 3082,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 82,
            "percentage": 2.36,
            "percentageTokens": 2.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/utils/auth.ts": {
            "lines": 7,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/types/shared.d.ts": {
            "lines": 43,
            "tokens": 362,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/ushaService.ts": {
            "lines": 134,
            "tokens": 1052,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/twilio.ts": {
            "lines": 126,
            "tokens": 937,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/ringyService.ts": {
            "lines": 117,
            "tokens": 912,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/ringyImport.ts": {
            "lines": 53,
            "tokens": 406,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/queryBuilder.service.ts": {
            "lines": 269,
            "tokens": 2241,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 212,
            "percentage": 6.69,
            "percentageTokens": 9.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/nextgenService.ts": {
            "lines": 101,
            "tokens": 779,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/groupMeService.ts": {
            "lines": 518,
            "tokens": 4199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/campaignScheduler.ts": {
            "lines": 267,
            "tokens": 2182,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 132,
            "percentage": 6.74,
            "percentageTokens": 6.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/backupService.ts": {
            "lines": 232,
            "tokens": 2072,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/auditService.ts": {
            "lines": 219,
            "tokens": 1557,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/services/apiConfig.ts": {
            "lines": 24,
            "tokens": 160,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/update-leads.ts": {
            "lines": 136,
            "tokens": 892,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/testCampaignProcessor.ts": {
            "lines": 28,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/seed.ts": {
            "lines": 32,
            "tokens": 216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reimport-leads.ts": {
            "lines": 139,
            "tokens": 1082,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 160,
            "duplicatedTokens": 1286,
            "percentage": 115.11,
            "percentageTokens": 118.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reimport-leads-fixed.ts": {
            "lines": 149,
            "tokens": 1199,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 229,
            "duplicatedTokens": 1783,
            "percentage": 153.69,
            "percentageTokens": 148.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reimport-leads-drop.ts": {
            "lines": 166,
            "tokens": 1334,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 119,
            "duplicatedTokens": 925,
            "percentage": 71.69,
            "percentageTokens": 69.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reassign-leads.ts": {
            "lines": 44,
            "tokens": 330,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 89,
            "percentage": 27.27,
            "percentageTokens": 26.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/migrateSources.ts": {
            "lines": 147,
            "tokens": 1131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-ringy-leads.ts": {
            "lines": 42,
            "tokens": 292,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-nextgen-webhook-leads.ts": {
            "lines": 101,
            "tokens": 916,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-nextgen-leads.ts": {
            "lines": 207,
            "tokens": 1833,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 92,
            "percentage": 5.31,
            "percentageTokens": 5.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-csv.ts": {
            "lines": 155,
            "tokens": 1333,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 39,
            "duplicatedTokens": 336,
            "percentage": 25.16,
            "percentageTokens": 25.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-todays-leads.ts": {
            "lines": 73,
            "tokens": 612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-specific-leads.ts": {
            "lines": 190,
            "tokens": 1938,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 70,
            "duplicatedTokens": 528,
            "percentage": 36.84,
            "percentageTokens": 27.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-names-step2.ts": {
            "lines": 115,
            "tokens": 904,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 168,
            "percentage": 14.78,
            "percentageTokens": 18.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-names-final.ts": {
            "lines": 177,
            "tokens": 1338,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 168,
            "percentage": 9.6,
            "percentageTokens": 12.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-name-fields.ts": {
            "lines": 103,
            "tokens": 746,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-missing-info.ts": {
            "lines": 130,
            "tokens": 1331,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 93,
            "percentage": 9.23,
            "percentageTokens": 6.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-leads-format.ts": {
            "lines": 133,
            "tokens": 1346,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 58,
            "duplicatedTokens": 435,
            "percentage": 43.61,
            "percentageTokens": 32.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-lead-orders.ts": {
            "lines": 45,
            "tokens": 374,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 89,
            "percentage": 26.67,
            "percentageTokens": 23.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-all-names.ts": {
            "lines": 156,
            "tokens": 1237,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-admin-user.ts": {
            "lines": 44,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-admin-password.ts": {
            "lines": 57,
            "tokens": 412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/delete-exclusive-leads.ts": {
            "lines": 54,
            "tokens": 405,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/createIndexes.ts": {
            "lines": 161,
            "tokens": 1126,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/check-leads.ts": {
            "lines": 62,
            "tokens": 565,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 152,
            "percentage": 16.13,
            "percentageTokens": 26.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/add-test-lead.ts": {
            "lines": 49,
            "tokens": 331,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/webhook.routes.ts": {
            "lines": 284,
            "tokens": 2496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/settings.ts": {
            "lines": 48,
            "tokens": 408,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/integrations.routes.ts": {
            "lines": 185,
            "tokens": 1419,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 44,
            "duplicatedTokens": 398,
            "percentage": 23.78,
            "percentageTokens": 28.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/integration.routes.ts": {
            "lines": 277,
            "tokens": 2462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/groupMe.routes.ts": {
            "lines": 106,
            "tokens": 814,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/gmail.routes.ts": {
            "lines": 28,
            "tokens": 242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/emailTemplate.routes.ts": {
            "lines": 13,
            "tokens": 138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/documents.routes.ts": {
            "lines": 31,
            "tokens": 167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/dispositions.routes.ts": {
            "lines": 26,
            "tokens": 201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/campaign.routes.ts": {
            "lines": 20,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/calls.routes.ts": {
            "lines": 22,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/routes/auth.routes.ts": {
            "lines": 112,
            "tokens": 922,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/document.model.ts": {
            "lines": 119,
            "tokens": 819,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/call.model.ts": {
            "lines": 33,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/User.ts": {
            "lines": 101,
            "tokens": 871,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Template.ts": {
            "lines": 24,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Settings.ts": {
            "lines": 63,
            "tokens": 407,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Message.ts": {
            "lines": 34,
            "tokens": 339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Lead.ts": {
            "lines": 205,
            "tokens": 2029,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 188,
            "percentage": 11.22,
            "percentageTokens": 9.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/GroupMeMessage.ts": {
            "lines": 60,
            "tokens": 380,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/GroupMeConfig.ts": {
            "lines": 35,
            "tokens": 225,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/EmailTemplate.ts": {
            "lines": 29,
            "tokens": 274,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Disposition.ts": {
            "lines": 59,
            "tokens": 400,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Campaign.ts": {
            "lines": 66,
            "tokens": 659,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/Call.ts": {
            "lines": 36,
            "tokens": 439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/models/AuditLog.ts": {
            "lines": 76,
            "tokens": 675,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/middleware/validateQuery.middleware.ts": {
            "lines": 156,
            "tokens": 1115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/middleware/errorHandler.ts": {
            "lines": 28,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/middleware/auth.ts": {
            "lines": 148,
            "tokens": 1169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/cron/campaignProcessor.ts": {
            "lines": 31,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/ringy.controller.ts": {
            "lines": 216,
            "tokens": 1912,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/leads.controller.ts": {
            "lines": 875,
            "tokens": 7849,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/groupMe.controller.ts": {
            "lines": 612,
            "tokens": 5035,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 92,
            "duplicatedTokens": 812,
            "percentage": 15.03,
            "percentageTokens": 16.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/gmail.controller.ts": {
            "lines": 720,
            "tokens": 6000,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 48,
            "duplicatedTokens": 420,
            "percentage": 6.67,
            "percentageTokens": 7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/emailTemplate.controller.ts": {
            "lines": 171,
            "tokens": 1324,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 308,
            "percentage": 21.05,
            "percentageTokens": 23.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/documents.controller.ts": {
            "lines": 234,
            "tokens": 2180,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 246,
            "percentage": 9.4,
            "percentageTokens": 11.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/dispositions.controller.ts": {
            "lines": 318,
            "tokens": 3179,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 52,
            "duplicatedTokens": 862,
            "percentage": 16.35,
            "percentageTokens": 27.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/campaign.controller.ts": {
            "lines": 383,
            "tokens": 3000,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 192,
            "duplicatedTokens": 1618,
            "percentage": 50.13,
            "percentageTokens": 53.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/calls.controller.ts": {
            "lines": 77,
            "tokens": 705,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/controllers/auth.controller.ts": {
            "lines": 263,
            "tokens": 2320,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 204,
            "percentage": 8.37,
            "percentageTokens": 8.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/config/jwt.config.ts": {
            "lines": 34,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/config/apiKeys.ts": {
            "lines": 50,
            "tokens": 384,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/utils/timezoneUtils.ts": {
            "lines": 91,
            "tokens": 812,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/utils/formatUtils.ts": {
            "lines": 58,
            "tokens": 819,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/utils/clearAuthData.ts": {
            "lines": 46,
            "tokens": 355,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/utils/calendlyConstants.ts": {
            "lines": 32,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/types/shared-config.d.ts": {
            "lines": 9,
            "tokens": 129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/types/queryTypes.ts": {
            "lines": 377,
            "tokens": 2980,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 106,
            "percentage": 3.45,
            "percentageTokens": 3.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/types/index.ts": {
            "lines": 68,
            "tokens": 444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/types/Lead.ts": {
            "lines": 36,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/services/leadsApi.ts": {
            "lines": 245,
            "tokens": 1710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/services/groupMeOAuth.service.ts": {
            "lines": 71,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/services/documentsApi.ts": {
            "lines": 53,
            "tokens": 457,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/hooks/useLocalTime.ts": {
            "lines": 73,
            "tokens": 475,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/hooks/useLeadsSearchIntegration.ts": {
            "lines": 254,
            "tokens": 1742,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 298,
            "percentage": 17.32,
            "percentageTokens": 17.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/hooks/useLeadsQuery.ts": {
            "lines": 178,
            "tokens": 1355,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/hooks/useLeadsPageData.ts": {
            "lines": 148,
            "tokens": 1069,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/hooks/useLeadsData.ts": {
            "lines": 151,
            "tokens": 1216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/src/api/axiosInstance.ts": {
            "lines": 129,
            "tokens": 842,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "shared/config/queryConfig.ts": {
            "lines": 106,
            "tokens": 893,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/index.ts": {
            "lines": 328,
            "tokens": 2931,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/vite.config.ts": {
            "lines": 59,
            "tokens": 494,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 14467,
          "tokens": 118759,
          "sources": 105,
          "clones": 41,
          "duplicatedLines": 700,
          "duplicatedTokens": 6015,
          "percentage": 4.84,
          "percentageTokens": 5.06,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "server/src/scripts/updateMarketplaceProcessor.js": {
            "lines": 134,
            "tokens": 466,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 144,
            "percentage": 11.94,
            "percentageTokens": 30.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/update-user-schema.js": {
            "lines": 39,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/update-leads.js": {
            "lines": 135,
            "tokens": 989,
            "sources": 1,
            "clones": 22,
            "duplicatedLines": 239,
            "duplicatedTokens": 2942,
            "percentage": 177.04,
            "percentageTokens": 297.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/testCampaignProcessor.js": {
            "lines": 30,
            "tokens": 294,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 85,
            "percentage": 23.33,
            "percentageTokens": 28.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/seed.js": {
            "lines": 32,
            "tokens": 318,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 100,
            "percentage": 25,
            "percentageTokens": 31.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reimport-leads.js": {
            "lines": 126,
            "tokens": 1200,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 156,
            "duplicatedTokens": 1458,
            "percentage": 123.81,
            "percentageTokens": 121.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reimport-leads-fixed.js": {
            "lines": 135,
            "tokens": 1314,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 213,
            "duplicatedTokens": 1977,
            "percentage": 157.78,
            "percentageTokens": 150.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reimport-leads-drop.js": {
            "lines": 150,
            "tokens": 1446,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 115,
            "duplicatedTokens": 1078,
            "percentage": 76.67,
            "percentageTokens": 74.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/reassign-leads.js": {
            "lines": 43,
            "tokens": 439,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 17,
            "duplicatedTokens": 190,
            "percentage": 39.53,
            "percentageTokens": 43.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-ringy-leads.js": {
            "lines": 42,
            "tokens": 373,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 85,
            "percentage": 16.67,
            "percentageTokens": 22.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-nextgen-webhook-leads.js": {
            "lines": 95,
            "tokens": 1020,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 158,
            "percentage": 13.68,
            "percentageTokens": 15.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-nextgen-leads.js": {
            "lines": 172,
            "tokens": 1807,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 33,
            "duplicatedTokens": 328,
            "percentage": 19.19,
            "percentageTokens": 18.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/import-csv.js": {
            "lines": 145,
            "tokens": 1455,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 539,
            "percentage": 34.48,
            "percentageTokens": 37.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fixDuplicateLeads.js": {
            "lines": 148,
            "tokens": 1119,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 170,
            "percentage": 14.19,
            "percentageTokens": 15.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fixAllDuplicates.js": {
            "lines": 144,
            "tokens": 1210,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 170,
            "percentage": 14.58,
            "percentageTokens": 14.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-todays-leads.js": {
            "lines": 68,
            "tokens": 705,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 113,
            "percentage": 13.24,
            "percentageTokens": 16.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-specific-leads.js": {
            "lines": 159,
            "tokens": 1884,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 484,
            "percentage": 31.45,
            "percentageTokens": 25.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-names-step2.js": {
            "lines": 106,
            "tokens": 997,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 295,
            "percentage": 22.64,
            "percentageTokens": 29.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-names-final.js": {
            "lines": 160,
            "tokens": 1417,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 310,
            "percentage": 16.25,
            "percentageTokens": 21.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-name-fields.js": {
            "lines": 91,
            "tokens": 836,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 143,
            "percentage": 13.19,
            "percentageTokens": 17.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-missing-info.js": {
            "lines": 122,
            "tokens": 1421,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 183,
            "duplicatedTokens": 1761,
            "percentage": 150,
            "percentageTokens": 123.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-leads-format.js": {
            "lines": 105,
            "tokens": 1295,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 39,
            "duplicatedTokens": 392,
            "percentage": 37.14,
            "percentageTokens": 30.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-lead-orders.js": {
            "lines": 44,
            "tokens": 484,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 248,
            "percentage": 50,
            "percentageTokens": 51.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/fix-all-names.js": {
            "lines": 142,
            "tokens": 1310,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 143,
            "percentage": 8.45,
            "percentageTokens": 10.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/delete-exclusive-leads.js": {
            "lines": 53,
            "tokens": 508,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 143,
            "percentage": 22.64,
            "percentageTokens": 28.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/createIndexes.js": {
            "lines": 145,
            "tokens": 1183,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 82,
            "percentage": 4.14,
            "percentageTokens": 6.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/check-leads.js": {
            "lines": 60,
            "tokens": 665,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 22,
            "duplicatedTokens": 295,
            "percentage": 36.67,
            "percentageTokens": 44.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/src/scripts/add-test-lead.js": {
            "lines": 49,
            "tokens": 433,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 143,
            "percentage": 24.49,
            "percentageTokens": 33.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/tests/test-mongo.js": {
            "lines": 32,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/tests/test-linkpellowinsurance.js": {
            "lines": 55,
            "tokens": 415,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 26,
            "duplicatedTokens": 250,
            "percentage": 47.27,
            "percentageTokens": 60.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/tests/test-linkpellow-user.js": {
            "lines": 52,
            "tokens": 390,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 299,
            "percentage": 65.38,
            "percentageTokens": 76.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/tests/test-jwt.js": {
            "lines": 35,
            "tokens": 251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/tests/test-dialer-app-user.js": {
            "lines": 64,
            "tokens": 513,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 374,
            "percentage": 65.63,
            "percentageTokens": 72.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/seed-admin.js": {
            "lines": 65,
            "tokens": 631,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/reimport-leads.js": {
            "lines": 13,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/reimport-leads-fixed.js": {
            "lines": 13,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/reimport-leads-drop.js": {
            "lines": 14,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/import-nextgen-leads.js": {
            "lines": 11,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/import-leads.js": {
            "lines": 9,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/import-leads-universal.js": {
            "lines": 361,
            "tokens": 2850,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 80,
            "duplicatedTokens": 734,
            "percentage": 22.16,
            "percentageTokens": 25.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/migration/import-leads-fixed.js": {
            "lines": 150,
            "tokens": 1362,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 64,
            "duplicatedTokens": 564,
            "percentage": 42.67,
            "percentageTokens": 41.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/update-user.js": {
            "lines": 80,
            "tokens": 606,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/update-todays-leads.js": {
            "lines": 92,
            "tokens": 716,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 255,
            "duplicatedTokens": 2207,
            "percentage": 277.17,
            "percentageTokens": 308.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/update-new-leads.js": {
            "lines": 90,
            "tokens": 702,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 361,
            "percentage": 44.44,
            "percentageTokens": 51.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/reset-admin-password.js": {
            "lines": 43,
            "tokens": 338,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/remove-duplicate-leads.js": {
            "lines": 13,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-zipcode-decimals.js": {
            "lines": 77,
            "tokens": 640,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 78,
            "duplicatedTokens": 688,
            "percentage": 101.3,
            "percentageTokens": 107.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-walter.js": {
            "lines": 81,
            "tokens": 650,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 361,
            "percentage": 49.38,
            "percentageTokens": 55.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-specific-leads.js": {
            "lines": 130,
            "tokens": 1059,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 91,
            "duplicatedTokens": 678,
            "percentage": 70,
            "percentageTokens": 64.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-specific-leads-format.js": {
            "lines": 134,
            "tokens": 993,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 46,
            "duplicatedTokens": 365,
            "percentage": 34.33,
            "percentageTokens": 36.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-nextgen-source.js": {
            "lines": 87,
            "tokens": 693,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 43,
            "duplicatedTokens": 362,
            "percentage": 49.43,
            "percentageTokens": 52.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-names.js": {
            "lines": 100,
            "tokens": 747,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 264,
            "percentage": 30,
            "percentageTokens": 35.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-names-step2.js": {
            "lines": 11,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-names-final.js": {
            "lines": 13,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-name.js": {
            "lines": 74,
            "tokens": 560,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 264,
            "percentage": 40.54,
            "percentageTokens": 47.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-marketplace-phones.js": {
            "lines": 141,
            "tokens": 1314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-marketplace-leads.js": {
            "lines": 178,
            "tokens": 1541,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-leads.js": {
            "lines": 154,
            "tokens": 1543,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 147,
            "duplicatedTokens": 1488,
            "percentage": 95.45,
            "percentageTokens": 96.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-lead-orders.js": {
            "lines": 10,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-height-format.js": {
            "lines": 80,
            "tokens": 656,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 46,
            "duplicatedTokens": 366,
            "percentage": 57.5,
            "percentageTokens": 55.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/fix-all-names.js": {
            "lines": 14,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/delete-phoneless-leads.js": {
            "lines": 70,
            "tokens": 588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/delete-exclusive-leads.js": {
            "lines": 10,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/fixes/delete-all-phoneless-leads.js": {
            "lines": 63,
            "tokens": 569,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 86,
            "percentage": 12.7,
            "percentageTokens": 15.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/list-collections.js": {
            "lines": 43,
            "tokens": 345,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/find-all-user-databases.js": {
            "lines": 99,
            "tokens": 723,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/find-all-leads.js": {
            "lines": 110,
            "tokens": 894,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 15,
            "duplicatedTokens": 168,
            "percentage": 13.64,
            "percentageTokens": 18.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/find-all-databases.js": {
            "lines": 97,
            "tokens": 753,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/deep-search-leads.js": {
            "lines": 116,
            "tokens": 1019,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 15,
            "duplicatedTokens": 168,
            "percentage": 12.93,
            "percentageTokens": 16.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/deep-analyze-marketplace.js": {
            "lines": 77,
            "tokens": 603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-real-database.js": {
            "lines": 68,
            "tokens": 588,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 40,
            "duplicatedTokens": 394,
            "percentage": 58.82,
            "percentageTokens": 67.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-local-mongodb.js": {
            "lines": 74,
            "tokens": 658,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-linkpellow-db.js": {
            "lines": 61,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-leads.js": {
            "lines": 11,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-lead-sources.js": {
            "lines": 113,
            "tokens": 926,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 43,
            "duplicatedTokens": 362,
            "percentage": 38.05,
            "percentageTokens": 39.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-existing-data.js": {
            "lines": 109,
            "tokens": 945,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-dialer-app-user.js": {
            "lines": 48,
            "tokens": 397,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 319,
            "percentage": 77.08,
            "percentageTokens": 80.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-dialer-app-full.js": {
            "lines": 86,
            "tokens": 804,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 138,
            "percentage": 15.12,
            "percentageTokens": 17.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-atlas-users.js": {
            "lines": 37,
            "tokens": 317,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-atlas-simple.js": {
            "lines": 70,
            "tokens": 571,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-atlas-database.js": {
            "lines": 61,
            "tokens": 506,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/check-all-assignments.js": {
            "lines": 103,
            "tokens": 896,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/analyze-marketplace-leads.js": {
            "lines": 101,
            "tokens": 908,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/scripts/analysis/analyze-csv.js": {
            "lines": 107,
            "tokens": 950,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/services/file-service.js": {
            "lines": 291,
            "tokens": 2284,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 346,
            "duplicatedTokens": 2946,
            "percentage": 118.9,
            "percentageTokens": 128.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/routes/leads.js": {
            "lines": 97,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/dev-tools/verify-token.js": {
            "lines": 22,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/dev-tools/upload-server.js": {
            "lines": 279,
            "tokens": 2281,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 279,
            "duplicatedTokens": 2281,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/dev-tools/start-server-bypass.js": {
            "lines": 23,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/dev-tools/simple-upload.js": {
            "lines": 182,
            "tokens": 1534,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 53,
            "duplicatedTokens": 507,
            "percentage": 29.12,
            "percentageTokens": 33.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/dev-tools/server.js": {
            "lines": 98,
            "tokens": 856,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/dev-tools/dev-server.js": {
            "lines": 247,
            "tokens": 1884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/reassign-leads.js": {
            "lines": 10,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "server/add-test-lead.js": {
            "lines": 8,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "client/tailwind.config.js": {
            "lines": 37,
            "tokens": 218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "mongo-mock.js": {
            "lines": 247,
            "tokens": 2061,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "CORRECTED_SEARCH_EFFECT.js": {
            "lines": 148,
            "tokens": 1054,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 298,
            "percentage": 29.73,
            "percentageTokens": 28.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 8773,
          "tokens": 74199,
          "sources": 97,
          "clones": 84,
          "duplicatedLines": 1665,
          "duplicatedTokens": 15634,
          "percentage": 18.98,
          "percentageTokens": 21.07,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 23240,
      "tokens": 192958,
      "sources": 202,
      "clones": 125,
      "duplicatedLines": 2365,
      "duplicatedTokens": 21649,
      "percentage": 10.18,
      "percentageTokens": 11.22,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ".$or = [\n        { name: { $regex: searchRegex } },\n        { firstName: { $regex: searchRegex } },\n        { lastName: { $regex: searchRegex } },\n        { email: { $regex: searchRegex } },\n        { phone: { $regex: searchRegex } },\n      ];\n    }\n\n    // Add state filter",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/services/queryBuilder.service.ts",
        "start": 210,
        "end": 219,
        "startLoc": {
          "line": 210,
          "column": 6,
          "position": 1644
        },
        "endLoc": {
          "line": 219,
          "column": 20,
          "position": 1750
        }
      },
      "secondFile": {
        "name": "server/src/services/queryBuilder.service.ts",
        "start": 51,
        "end": 60,
        "startLoc": {
          "line": 51,
          "column": 7,
          "position": 387
        },
        "endLoc": {
          "line": 60,
          "column": 16,
          "position": 493
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst campaignScheduler_1",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/testCampaignProcessor.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 20,
          "position": 85
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 11,
          "position": 85
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst User_js_1",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/seed.js",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 10,
          "position": 100
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 100
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst fs_1",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 5,
          "position": 100
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 100
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "() {\n  try {\n    console.log(\"Starting clean lead import from CSV files...\");\n\n    // Connect to MongoDB\n    await mongoose.connect(process.env.MONGODB_URI || \"\");\n    console.log(\"Connected to MongoDB\");\n\n    // Find admin user\n    const admin = await UserModel.findOne({ role: \"admin\" });\n    if (!admin) {\n      throw new Error(\"No admin user found\");\n    }\n\n    // Now import leads from both CSV files",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 83
        },
        "endLoc": {
          "line": 26,
          "column": 40,
          "position": 188
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 14,
          "position": 83
        },
        "endLoc": {
          "line": 26,
          "column": 40,
          "position": 188
        }
      }
    },
    {
      "format": "typescript",
      "lines": 43,
      "fragment": "// Now import leads from both CSV files\n    const csvDir = path.join(__dirname, \"../../../csv\");\n    const files = [\n      \"purchases-2025-02-03-to-2025-03-23.csv\",\n      \"purchases-2025-02-03-to-2025-03-22 (1).csv\",\n    ];\n\n    let totalImported = 0;\n    let totalSkipped = 0;\n\n    for (const file of files) {\n      const filePath = path.join(csvDir, file);\n      console.log(`Processing file: ${file}`);\n\n      // Read and parse CSV file\n      const fileContent = fs.readFileSync(filePath, \"utf-8\");\n      const records: any[] = [];\n\n      await new Promise((resolve, reject) => {\n        parse(\n          fileContent,\n          {\n            columns: true,\n            skip_empty_lines: true,\n          },\n          (err, data) => {\n            if (err) reject(err);\n            else {\n              records.push(...data);\n              resolve(null);\n            }\n          },\n        );\n      });\n\n      console.log(`Found ${records.length} records in file ${file}`);\n\n      let importedCount = 0;\n      let skippedCount = 0;\n\n      for (const record of records) {\n        try {\n          // Skip if the name field contains \"exclusive\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 26,
        "end": 68,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 188
        },
        "endLoc": {
          "line": 68,
          "column": 47,
          "position": 509
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 30,
        "end": 72,
        "startLoc": {
          "line": 30,
          "column": 5,
          "position": 213
        },
        "endLoc": {
          "line": 72,
          "column": 62,
          "position": 534
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "// Build the proper full name from first and last name fields\n          const firstName = record.first_name || \"\";\n          const lastName = record.last_name || \"\";\n          const fullName = `${firstName} ${lastName}`.trim();\n\n          // Skip if we don't have a valid full name\n          if (!fullName || fullName === \"\") {\n            skippedCount++;\n            continue;\n          }\n\n          // Only keep the phone from the original data",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 80,
        "end": 91,
        "startLoc": {
          "line": 80,
          "column": 11,
          "position": 603
        },
        "endLoc": {
          "line": 91,
          "column": 46,
          "position": 695
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 72,
        "end": 83,
        "startLoc": {
          "line": 72,
          "column": 11,
          "position": 534
        },
        "endLoc": {
          "line": 83,
          "column": 66,
          "position": 626
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ",\n            zipcode: record.zipcode || \"\",\n            dob: record.dob || \"\",\n            height: record.height || \"\",\n            weight: record.weight || \"\",\n            gender: record.gender || \"\",\n            state: record.state ? record.state.toUpperCase() : \"\",\n            city: record.city || \"\",\n            street1: record.street_1 || \"\",\n            street2: record.street_2 || \"\",\n            status: \"New\",\n            source: \"NextGen\",\n            notes: JSON.stringify(record),\n            assignedTo: admin._id,\n          };\n\n          // Use Mongoose model instead of direct MongoDB access",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 106,
        "end": 122,
        "startLoc": {
          "line": 106,
          "column": 6,
          "position": 835
        },
        "endLoc": {
          "line": 122,
          "column": 55,
          "position": 1005
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 96,
        "end": 112,
        "startLoc": {
          "line": 96,
          "column": 14,
          "position": 722
        },
        "endLoc": {
          "line": 112,
          "column": 19,
          "position": 892
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": ");\n          importedCount++;\n        } catch (error) {\n          console.error(\"Error processing record:\", error);\n          skippedCount++;\n        }\n      }\n\n      console.log(\n        `File ${file} processed: ${importedCount} imported, ${skippedCount} skipped`,\n      );\n      totalImported += importedCount;\n      totalSkipped += skippedCount;\n    }\n\n    console.log(\n      `Import completed. Total: ${totalImported} leads imported, ${totalSkipped} skipped`,\n    );\n  } catch (error) {\n    console.error(\"Error in reimporting leads:\", error);\n  } finally {\n    await mongoose.connection.close();\n    console.log(\"MongoDB connection closed\");\n  }\n}\n\n// Run the reimport\nreimportLeadsFixed",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 123,
        "end": 150,
        "startLoc": {
          "line": 123,
          "column": 2,
          "position": 1019
        },
        "endLoc": {
          "line": 150,
          "column": 19,
          "position": 1189
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 113,
        "end": 140,
        "startLoc": {
          "line": 113,
          "column": 9,
          "position": 902
        },
        "endLoc": {
          "line": 140,
          "column": 14,
          "position": 1072
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst csv_parse_1 = require(\"csv-parse\");\nconst path_1 = __importDefault(require(\"path\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst User_1 = __importDefault(require(\"../models/User\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function reimportLeadsFixed",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 19,
          "position": 200
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 14,
          "position": 200
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "() {\n  try {\n    console.log(\"Starting clean lead import from CSV files...\");\n    // Connect to MongoDB\n    await mongoose_1.default.connect(process.env.MONGODB_URI || \"\");\n    console.log(\"Connected to MongoDB\");\n    // Find admin user\n    const admin = await User_1.default.findOne({ role: \"admin\" });\n    if (!admin) {\n      throw new Error(\"No admin user found\");\n    }\n    // Now import leads from both CSV files",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 17,
        "end": 28,
        "startLoc": {
          "line": 17,
          "column": 19,
          "position": 201
        },
        "endLoc": {
          "line": 28,
          "column": 40,
          "position": 307
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 17,
        "end": 28,
        "startLoc": {
          "line": 17,
          "column": 14,
          "position": 201
        },
        "endLoc": {
          "line": 28,
          "column": 40,
          "position": 307
        }
      }
    },
    {
      "format": "javascript",
      "lines": 36,
      "fragment": "// Now import leads from both CSV files\n    const csvDir = path_1.default.join(__dirname, \"../../../csv\");\n    const files = [\n      \"purchases-2025-02-03-to-2025-03-23.csv\",\n      \"purchases-2025-02-03-to-2025-03-22 (1).csv\",\n    ];\n    let totalImported = 0;\n    let totalSkipped = 0;\n    for (const file of files) {\n      const filePath = path_1.default.join(csvDir, file);\n      console.log(`Processing file: ${file}`);\n      // Read and parse CSV file\n      const fileContent = fs_1.default.readFileSync(filePath, \"utf-8\");\n      const records = [];\n      await new Promise((resolve, reject) => {\n        (0, csv_parse_1.parse)(\n          fileContent,\n          {\n            columns: true,\n            skip_empty_lines: true,\n          },\n          (err, data) => {\n            if (err) reject(err);\n            else {\n              records.push(...data);\n              resolve(null);\n            }\n          },\n        );\n      });\n      console.log(`Found ${records.length} records in file ${file}`);\n      let importedCount = 0;\n      let skippedCount = 0;\n      for (const record of records) {\n        try {\n          // Skip if the name field contains \"exclusive\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 28,
        "end": 63,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 307
        },
        "endLoc": {
          "line": 63,
          "column": 47,
          "position": 629
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 31,
        "end": 66,
        "startLoc": {
          "line": 31,
          "column": 5,
          "position": 333
        },
        "endLoc": {
          "line": 66,
          "column": 62,
          "position": 655
        }
      }
    },
    {
      "format": "javascript",
      "lines": 10,
      "fragment": "// Build the proper full name from first and last name fields\n          const firstName = record.first_name || \"\";\n          const lastName = record.last_name || \"\";\n          const fullName = `${firstName} ${lastName}`.trim();\n          // Skip if we don't have a valid full name\n          if (!fullName || fullName === \"\") {\n            skippedCount++;\n            continue;\n          }\n          // Only keep the phone from the original data",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 74,
        "end": 83,
        "startLoc": {
          "line": 74,
          "column": 11,
          "position": 722
        },
        "endLoc": {
          "line": 83,
          "column": 46,
          "position": 812
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 66,
        "end": 75,
        "startLoc": {
          "line": 66,
          "column": 11,
          "position": 655
        },
        "endLoc": {
          "line": 75,
          "column": 66,
          "position": 745
        }
      }
    },
    {
      "format": "javascript",
      "lines": 16,
      "fragment": ",\n            zipcode: record.zipcode || \"\",\n            dob: record.dob || \"\",\n            height: record.height || \"\",\n            weight: record.weight || \"\",\n            gender: record.gender || \"\",\n            state: record.state ? record.state.toUpperCase() : \"\",\n            city: record.city || \"\",\n            street1: record.street_1 || \"\",\n            street2: record.street_2 || \"\",\n            status: \"New\",\n            source: \"NextGen\",\n            notes: JSON.stringify(record),\n            assignedTo: admin._id,\n          };\n          // Use Mongoose model instead of direct MongoDB access",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 96,
        "end": 111,
        "startLoc": {
          "line": 96,
          "column": 6,
          "position": 950
        },
        "endLoc": {
          "line": 111,
          "column": 55,
          "position": 1119
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 87,
        "end": 102,
        "startLoc": {
          "line": 87,
          "column": 14,
          "position": 840
        },
        "endLoc": {
          "line": 102,
          "column": 19,
          "position": 1009
        }
      }
    },
    {
      "format": "javascript",
      "lines": 25,
      "fragment": ");\n          importedCount++;\n        } catch (error) {\n          console.error(\"Error processing record:\", error);\n          skippedCount++;\n        }\n      }\n      console.log(\n        `File ${file} processed: ${importedCount} imported, ${skippedCount} skipped`,\n      );\n      totalImported += importedCount;\n      totalSkipped += skippedCount;\n    }\n    console.log(\n      `Import completed. Total: ${totalImported} leads imported, ${totalSkipped} skipped`,\n    );\n  } catch (error) {\n    console.error(\"Error in reimporting leads:\", error);\n  } finally {\n    await mongoose_1.default.connection.close();\n    console.log(\"MongoDB connection closed\");\n  }\n}\n// Run the reimport\nreimportLeadsFixed",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 112,
        "end": 136,
        "startLoc": {
          "line": 112,
          "column": 2,
          "position": 1135
        },
        "endLoc": {
          "line": 136,
          "column": 19,
          "position": 1304
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 103,
        "end": 127,
        "startLoc": {
          "line": 103,
          "column": 9,
          "position": 1021
        },
        "endLoc": {
          "line": 127,
          "column": 14,
          "position": 1190
        }
      }
    },
    {
      "format": "typescript",
      "lines": 73,
      "fragment": ");\n    }\n\n    // Now import leads from both CSV files\n    const csvDir = path.join(__dirname, \"../../../csv\");\n    const files = [\n      \"purchases-2025-02-03-to-2025-03-23.csv\",\n      \"purchases-2025-02-03-to-2025-03-22 (1).csv\",\n    ];\n\n    let totalImported = 0;\n    let totalSkipped = 0;\n\n    for (const file of files) {\n      const filePath = path.join(csvDir, file);\n      console.log(`Processing file: ${file}`);\n\n      // Read and parse CSV file\n      const fileContent = fs.readFileSync(filePath, \"utf-8\");\n      const records: any[] = [];\n\n      await new Promise((resolve, reject) => {\n        parse(\n          fileContent,\n          {\n            columns: true,\n            skip_empty_lines: true,\n          },\n          (err, data) => {\n            if (err) reject(err);\n            else {\n              records.push(...data);\n              resolve(null);\n            }\n          },\n        );\n      });\n\n      console.log(`Found ${records.length} records in file ${file}`);\n\n      let importedCount = 0;\n      let skippedCount = 0;\n\n      for (const record of records) {\n        try {\n          // Skip if the name field contains \"exclusive\"\n          if (\n            (record.first_name || \"\").toLowerCase().includes(\"exclusive\") ||\n            (record.last_name || \"\").toLowerCase().includes(\"exclusive\")\n          ) {\n            console.log(\n              `Skipping record with \"exclusive\" in name: ${record.first_name} ${record.last_name}`,\n            );\n            skippedCount++;\n            continue;\n          }\n\n          // Build the proper full name from first and last name fields\n          const firstName = record.first_name || \"\";\n          const lastName = record.last_name || \"\";\n          const fullName = `${firstName} ${lastName}`.trim();\n\n          // Skip if we don't have a valid full name\n          if (!fullName || fullName === \"\") {\n            skippedCount++;\n            continue;\n          }\n\n          // Only keep the phone from the original data\n          const phone = record.phone || \"Unknown\";\n\n          // Create lead data with correct field mapping\n          // Make email unique by adding random string",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.ts",
        "start": 40,
        "end": 112,
        "startLoc": {
          "line": 40,
          "column": 31,
          "position": 300
        },
        "endLoc": {
          "line": 112,
          "column": 45,
          "position": 838
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 23,
        "end": 95,
        "startLoc": {
          "line": 23,
          "column": 22,
          "position": 180
        },
        "endLoc": {
          "line": 95,
          "column": 54,
          "position": 718
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "}@example.com`;\n\n          const leadData = {\n            name: fullName,\n            firstName: firstName,\n            lastName: lastName,\n            phone: phone,\n            email: email,\n            zipcode: record.zipcode || \"\",\n            dob: record.dob || \"\",\n            height: record.height || \"\",\n            weight: record.weight || \"\",\n            gender: record.gender || \"\",\n            state: record.state ? record.state.toUpperCase() : \"\",\n            city: record.city || \"\",\n            street1: record.street_1 || \"\",\n            street2: record.street_2 || \"\",\n            status: \"New\",\n            source: \"NextGen\",\n            notes: JSON.stringify(record),\n            assignedTo: adminId",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.ts",
        "start": 116,
        "end": 136,
        "startLoc": {
          "line": 116,
          "column": 13,
          "position": 925
        },
        "endLoc": {
          "line": 136,
          "column": 8,
          "position": 1131
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 99,
        "end": 109,
        "startLoc": {
          "line": 99,
          "column": 10,
          "position": 788
        },
        "endLoc": {
          "line": 109,
          "column": 6,
          "position": 881
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "await new LeadModel(leadData).save();\n          importedCount++;\n        } catch (error) {\n          console.error(\"Error processing record:\", error);\n          skippedCount++;\n        }\n      }\n\n      console.log(\n        `File ${file} processed: ${importedCount} imported, ${skippedCount} skipped`,\n      );\n      totalImported += importedCount;\n      totalSkipped += skippedCount;\n    }\n\n    console.log(\n      `Import completed. Total: ${totalImported} leads imported, ${totalSkipped} skipped`,\n    );\n  } catch (error) {\n    console.error(\"Error in reimporting leads:\", error);\n  } finally {\n    await mongoose.connection.close();\n    console.log(\"MongoDB connection closed\");\n  }\n}\n\n// Run the reimport\nreimportLeadsDrop",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.ts",
        "start": 140,
        "end": 167,
        "startLoc": {
          "line": 140,
          "column": 11,
          "position": 1143
        },
        "endLoc": {
          "line": 167,
          "column": 18,
          "position": 1324
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads-fixed.ts",
        "start": 123,
        "end": 140,
        "startLoc": {
          "line": 123,
          "column": 11,
          "position": 1008
        },
        "endLoc": {
          "line": 140,
          "column": 14,
          "position": 1072
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst csv_parse_1 = require(\"csv-parse\");\nconst path_1 = __importDefault(require(\"path\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 7,
          "position": 157
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 7,
          "position": 157
        }
      }
    },
    {
      "format": "javascript",
      "lines": 61,
      "fragment": ");\n    }\n    // Now import leads from both CSV files\n    const csvDir = path_1.default.join(__dirname, \"../../../csv\");\n    const files = [\n      \"purchases-2025-02-03-to-2025-03-23.csv\",\n      \"purchases-2025-02-03-to-2025-03-22 (1).csv\",\n    ];\n    let totalImported = 0;\n    let totalSkipped = 0;\n    for (const file of files) {\n      const filePath = path_1.default.join(csvDir, file);\n      console.log(`Processing file: ${file}`);\n      // Read and parse CSV file\n      const fileContent = fs_1.default.readFileSync(filePath, \"utf-8\");\n      const records = [];\n      await new Promise((resolve, reject) => {\n        (0, csv_parse_1.parse)(\n          fileContent,\n          {\n            columns: true,\n            skip_empty_lines: true,\n          },\n          (err, data) => {\n            if (err) reject(err);\n            else {\n              records.push(...data);\n              resolve(null);\n            }\n          },\n        );\n      });\n      console.log(`Found ${records.length} records in file ${file}`);\n      let importedCount = 0;\n      let skippedCount = 0;\n      for (const record of records) {\n        try {\n          // Skip if the name field contains \"exclusive\"\n          if (\n            (record.first_name || \"\").toLowerCase().includes(\"exclusive\") ||\n            (record.last_name || \"\").toLowerCase().includes(\"exclusive\")\n          ) {\n            console.log(\n              `Skipping record with \"exclusive\" in name: ${record.first_name} ${record.last_name}`,\n            );\n            skippedCount++;\n            continue;\n          }\n          // Build the proper full name from first and last name fields\n          const firstName = record.first_name || \"\";\n          const lastName = record.last_name || \"\";\n          const fullName = `${firstName} ${lastName}`.trim();\n          // Skip if we don't have a valid full name\n          if (!fullName || fullName === \"\") {\n            skippedCount++;\n            continue;\n          }\n          // Only keep the phone from the original data\n          const phone = record.phone || \"Unknown\";\n          // Create lead data with correct field mapping\n          // Make email unique by adding random string",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.js",
        "start": 41,
        "end": 101,
        "startLoc": {
          "line": 41,
          "column": 31,
          "position": 417
        },
        "endLoc": {
          "line": 101,
          "column": 45,
          "position": 951
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 26,
        "end": 86,
        "startLoc": {
          "line": 26,
          "column": 22,
          "position": 300
        },
        "endLoc": {
          "line": 86,
          "column": 54,
          "position": 834
        }
      }
    },
    {
      "format": "javascript",
      "lines": 20,
      "fragment": "}@example.com`;\n          const leadData = {\n            name: fullName,\n            firstName: firstName,\n            lastName: lastName,\n            phone: phone,\n            email: email,\n            zipcode: record.zipcode || \"\",\n            dob: record.dob || \"\",\n            height: record.height || \"\",\n            weight: record.weight || \"\",\n            gender: record.gender || \"\",\n            state: record.state ? record.state.toUpperCase() : \"\",\n            city: record.city || \"\",\n            street1: record.street_1 || \"\",\n            street2: record.street_2 || \"\",\n            status: \"New\",\n            source: \"NextGen\",\n            notes: JSON.stringify(record),\n            assignedTo: adminId",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.js",
        "start": 105,
        "end": 124,
        "startLoc": {
          "line": 105,
          "column": 13,
          "position": 1038
        },
        "endLoc": {
          "line": 124,
          "column": 8,
          "position": 1243
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 90,
        "end": 100,
        "startLoc": {
          "line": 90,
          "column": 10,
          "position": 904
        },
        "endLoc": {
          "line": 100,
          "column": 6,
          "position": 999
        }
      }
    },
    {
      "format": "javascript",
      "lines": 25,
      "fragment": "await new Lead_1.default(leadData).save();\n          importedCount++;\n        } catch (error) {\n          console.error(\"Error processing record:\", error);\n          skippedCount++;\n        }\n      }\n      console.log(\n        `File ${file} processed: ${importedCount} imported, ${skippedCount} skipped`,\n      );\n      totalImported += importedCount;\n      totalSkipped += skippedCount;\n    }\n    console.log(\n      `Import completed. Total: ${totalImported} leads imported, ${totalSkipped} skipped`,\n    );\n  } catch (error) {\n    console.error(\"Error in reimporting leads:\", error);\n  } finally {\n    await mongoose_1.default.connection.close();\n    console.log(\"MongoDB connection closed\");\n  }\n}\n// Run the reimport\nreimportLeadsDrop",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reimport-leads-drop.js",
        "start": 127,
        "end": 151,
        "startLoc": {
          "line": 127,
          "column": 11,
          "position": 1254
        },
        "endLoc": {
          "line": 151,
          "column": 18,
          "position": 1436
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads-fixed.js",
        "start": 112,
        "end": 127,
        "startLoc": {
          "line": 112,
          "column": 11,
          "position": 1122
        },
        "endLoc": {
          "line": 127,
          "column": 14,
          "position": 1190
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/reassign-leads.js",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 9,
          "position": 100
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 7,
          "position": 100
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-ringy-leads.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 8,
          "position": 85
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 11,
          "position": 85
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\nconst User_1 = __importDefault(require(\"../models/User\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function importWebhookLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-nextgen-webhook-leads.js",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 19,
          "position": 158
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 14,
          "position": 158
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "[] = [];\n  await new Promise((resolve, reject) => {\n    parse(\n      fileContent,\n      {\n        columns: true,\n        skip_empty_lines: true,\n      },\n      (err, data) => {\n        if (err) reject(err);\n        else {\n          records.push(...(",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-nextgen-leads.ts",
        "start": 39,
        "end": 50,
        "startLoc": {
          "line": 39,
          "column": 12,
          "position": 312
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 404
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 46,
        "end": 58,
        "startLoc": {
          "line": 46,
          "column": 4,
          "position": 351
        },
        "endLoc": {
          "line": 58,
          "column": 5,
          "position": 444
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-nextgen-leads.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 8,
          "position": 83
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 6,
          "position": 83
        }
      }
    },
    {
      "format": "javascript",
      "lines": 21,
      "fragment": "// Read and parse CSV file\n  const fileContent = fs_1.default.readFileSync(filePath, \"utf-8\");\n  const records = [];\n  await new Promise((resolve, reject) => {\n    (0, csv_parse_1.parse)(\n      fileContent,\n      {\n        columns: true,\n        skip_empty_lines: true,\n      },\n      (err, data) => {\n        if (err) reject(err);\n        else {\n          records.push(...data);\n          resolve(null);\n        }\n      },\n    );\n  });\n  console.log(\n    `Found ${records.length} leads to process in ",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-nextgen-leads.js",
        "start": 22,
        "end": 42,
        "startLoc": {
          "line": 22,
          "column": 3,
          "position": 269
        },
        "endLoc": {
          "line": 42,
          "column": 22,
          "position": 432
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 42,
        "end": 61,
        "startLoc": {
          "line": 42,
          "column": 7,
          "position": 445
        },
        "endLoc": {
          "line": 61,
          "column": 18,
          "position": 606
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ");\n\n    // Connect to MongoDB\n    await mongoose.connect(process.env.MONGODB_URI || \"\");\n    console.log(\"Connected to MongoDB\");\n\n    // Find admin user\n    const admin = await UserModel.findOne({ role: \"admin\" });\n    if (!admin) {\n      throw new Error(\"No admin user found\");\n    }\n\n    // Read and parse CSV file",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.ts",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 106
        },
        "endLoc": {
          "line": 26,
          "column": 27,
          "position": 195
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 47,
          "position": 99
        },
        "endLoc": {
          "line": 26,
          "column": 40,
          "position": 188
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "// Read and parse CSV file\n    const fileContent = fs.readFileSync(filePath, \"utf-8\");\n    const records: any[] = [];\n\n    await new Promise((resolve, reject) => {\n      parse(\n        fileContent,\n        {\n          columns: true,\n          skip_empty_lines: true,\n        },\n        (err, data) => {\n          if (err) reject(err);\n          else {\n            records.push(...data);\n            resolve(null);\n          }\n        },\n      );\n    });\n\n    console.log(`Found ${records.length} leads to process`",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.ts",
        "start": 26,
        "end": 47,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 195
        },
        "endLoc": {
          "line": 47,
          "column": 19,
          "position": 354
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 44,
        "end": 65,
        "startLoc": {
          "line": 44,
          "column": 7,
          "position": 324
        },
        "endLoc": {
          "line": 65,
          "column": 18,
          "position": 483
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "zipcode: record.zipcode || \"\",\n          dob: record.dob || \"\",\n          height: record.height || \"\",\n          weight: record.weight || \"\",\n          gender: record.gender || \"\",\n          state: record.state ? record.state.toUpperCase() : \"\",\n          // Additional fields",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.ts",
        "start": 73,
        "end": 79,
        "startLoc": {
          "line": 73,
          "column": 11,
          "position": 593
        },
        "endLoc": {
          "line": 79,
          "column": 21,
          "position": 681
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.ts",
        "start": 97,
        "end": 103,
        "startLoc": {
          "line": 97,
          "column": 13,
          "position": 725
        },
        "endLoc": {
          "line": 103,
          "column": 5,
          "position": 813
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst csv_parse_1 = require(\"csv-parse\");\nconst path_1 = __importDefault(require(\"path\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst User_1 = __importDefault(require(\"../models/User\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function importCSV",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.js",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 10,
          "position": 200
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 14,
          "position": 200
        }
      }
    },
    {
      "format": "javascript",
      "lines": 10,
      "fragment": ");\n    // Connect to MongoDB\n    await mongoose_1.default.connect(process.env.MONGODB_URI || \"\");\n    console.log(\"Connected to MongoDB\");\n    // Find admin user\n    const admin = await User_1.default.findOne({ role: \"admin\" });\n    if (!admin) {\n      throw new Error(\"No admin user found\");\n    }\n    // Read and parse CSV file",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.js",
        "start": 19,
        "end": 28,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 221
        },
        "endLoc": {
          "line": 28,
          "column": 27,
          "position": 311
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 19,
        "end": 28,
        "startLoc": {
          "line": 19,
          "column": 47,
          "position": 217
        },
        "endLoc": {
          "line": 28,
          "column": 40,
          "position": 307
        }
      }
    },
    {
      "format": "javascript",
      "lines": 20,
      "fragment": "// Read and parse CSV file\n    const fileContent = fs_1.default.readFileSync(filePath, \"utf-8\");\n    const records = [];\n    await new Promise((resolve, reject) => {\n      (0, csv_parse_1.parse)(\n        fileContent,\n        {\n          columns: true,\n          skip_empty_lines: true,\n        },\n        (err, data) => {\n          if (err) reject(err);\n          else {\n            records.push(...data);\n            resolve(null);\n          }\n        },\n      );\n    });\n    console.log(`Found ${records.length} leads to process`",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.js",
        "start": 28,
        "end": 47,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 311
        },
        "endLoc": {
          "line": 47,
          "column": 19,
          "position": 472
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 42,
        "end": 61,
        "startLoc": {
          "line": 42,
          "column": 7,
          "position": 445
        },
        "endLoc": {
          "line": 61,
          "column": 18,
          "position": 606
        }
      }
    },
    {
      "format": "javascript",
      "lines": 7,
      "fragment": "zipcode: record.zipcode || \"\",\n          dob: record.dob || \"\",\n          height: record.height || \"\",\n          weight: record.weight || \"\",\n          gender: record.gender || \"\",\n          state: record.state ? record.state.toUpperCase() : \"\",\n          // Additional fields",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/import-csv.js",
        "start": 69,
        "end": 75,
        "startLoc": {
          "line": 69,
          "column": 11,
          "position": 709
        },
        "endLoc": {
          "line": 75,
          "column": 21,
          "position": 797
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reimport-leads.js",
        "start": 88,
        "end": 94,
        "startLoc": {
          "line": 88,
          "column": 13,
          "position": 843
        },
        "endLoc": {
          "line": 94,
          "column": 5,
          "position": 931
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "()\n  .then(() => {\n    console.log(\"Script completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Script failed:\", error);\n    process.exit(1);\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fixDuplicateLeads.js",
        "start": 141,
        "end": 149,
        "startLoc": {
          "line": 141,
          "column": 18,
          "position": 1047
        },
        "endLoc": {
          "line": 149,
          "column": 2,
          "position": 1119
        }
      },
      "secondFile": {
        "name": "server/src/scripts/updateMarketplaceProcessor.js",
        "start": 127,
        "end": 135,
        "startLoc": {
          "line": 127,
          "column": 16,
          "position": 394
        },
        "endLoc": {
          "line": 135,
          "column": 2,
          "position": 466
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "() {\n  let client;\n\n  try {\n    // Connect to MongoDB\n    console.log(`Connecting to MongoDB at ${MONGODB_URI}`);\n    client = new MongoClient(MONGODB_URI);\n    await client.connect();\n    console.log(\"Connected to MongoDB\");\n\n    const db = client.db(DB_NAME);\n    const leadsCollection = db.collection(COLLECTION_NAME);\n\n    // Method 1: Use MongoDB aggregation to find exact duplicate emails",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fixAllDuplicates.js",
        "start": 12,
        "end": 25,
        "startLoc": {
          "line": 12,
          "column": 17,
          "position": 78
        },
        "endLoc": {
          "line": 25,
          "column": 68,
          "position": 176
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fixDuplicateLeads.js",
        "start": 20,
        "end": 33,
        "startLoc": {
          "line": 20,
          "column": 18,
          "position": 162
        },
        "endLoc": {
          "line": 33,
          "column": 20,
          "position": 260
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "()\n  .then(() => {\n    console.log(\"Script completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Script failed:\", error);\n    process.exit(1);\n  });",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fixAllDuplicates.js",
        "start": 137,
        "end": 145,
        "startLoc": {
          "line": 137,
          "column": 17,
          "position": 1138
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 1210
        }
      },
      "secondFile": {
        "name": "server/src/scripts/updateMarketplaceProcessor.js",
        "start": 127,
        "end": 135,
        "startLoc": {
          "line": 127,
          "column": 16,
          "position": 394
        },
        "endLoc": {
          "line": 135,
          "column": 2,
          "position": 466
        }
      }
    },
    {
      "format": "javascript",
      "lines": 10,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\nconst",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-todays-leads.js",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 6,
          "position": 113
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 6,
          "position": 113
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\nconst dotenv_1 = require(\"dotenv\");\n(0, dotenv_1.config)();\nconst fixSpecificLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-specific-leads.js",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 17,
          "position": 139
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 139
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-names-step2.js",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 30,
          "position": 128
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 6,
          "position": 128
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "const query = {\n      $and: [\n        { phone: { $exists: true } },\n        { phone: { $ne: \"\" } },\n        { phone: { $not: /\\d/ } }, // No digits in the phone field\n        { lastName: { $in: [\"\", null, undefined] } }, // Empty last name\n      ],\n    };\n\n    const badLeads = await LeadModel.find(query);\n    console.log(\n      `Found ${badLeads.length} leads with last names in phone fields`,\n    );\n\n    let fixedCount = 0;\n    let errorCount = 0;\n\n    for",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-names-final.ts",
        "start": 17,
        "end": 34,
        "startLoc": {
          "line": 17,
          "column": 5,
          "position": 99
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 267
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-names-step2.ts",
        "start": 17,
        "end": 33,
        "startLoc": {
          "line": 17,
          "column": 5,
          "position": 99
        },
        "endLoc": {
          "line": 33,
          "column": 4,
          "position": 266
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function fixNamesFinal",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-names-final.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 14,
          "position": 143
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 143
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": "const query = {\n      $and: [\n        { phone: { $exists: true } },\n        { phone: { $ne: \"\" } },\n        { phone: { $not: /\\d/ } }, // No digits in the phone field\n        { lastName: { $in: [\"\", null, undefined] } }, // Empty last name\n      ],\n    };\n    const badLeads = await Lead_1.default.find(query);\n    console.log(\n      `Found ${badLeads.length} leads with last names in phone fields`,\n    );\n    let fixedCount = 0;\n    let errorCount = 0;\n    for",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-names-final.js",
        "start": 20,
        "end": 34,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 200
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 367
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-names-step2.js",
        "start": 20,
        "end": 34,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 200
        },
        "endLoc": {
          "line": 34,
          "column": 4,
          "position": 367
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function fixNameFields",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-name-fields.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 14,
          "position": 143
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 143
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ",\n          zipcode: lead.zipcode,\n          dob: lead.dob,\n          height: lead.height,\n          weight: lead.weight,\n          gender: lead.gender,\n        });\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"\\nFinished updating leads\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-missing-info.ts",
        "start": 111,
        "end": 123,
        "startLoc": {
          "line": 111,
          "column": 6,
          "position": 1183
        },
        "endLoc": {
          "line": 123,
          "column": 28,
          "position": 1276
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.ts",
        "start": 171,
        "end": 183,
        "startLoc": {
          "line": 171,
          "column": 5,
          "position": 1790
        },
        "endLoc": {
          "line": 183,
          "column": 26,
          "position": 1883
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\nconst dotenv_1 = require(\"dotenv\");\n(0, dotenv_1.config)();\nconst fixMissingInfo",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-missing-info.js",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 139
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 139
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": ",\n          zipcode: lead.zipcode,\n          dob: lead.dob,\n          height: lead.height,\n          weight: lead.weight,\n          gender: lead.gender,\n        });\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n    console.log(\"\\nFinished updating leads\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-missing-info.js",
        "start": 105,
        "end": 116,
        "startLoc": {
          "line": 105,
          "column": 6,
          "position": 1275
        },
        "endLoc": {
          "line": 116,
          "column": 28,
          "position": 1367
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.js",
        "start": 142,
        "end": 153,
        "startLoc": {
          "line": 142,
          "column": 5,
          "position": 1738
        },
        "endLoc": {
          "line": 153,
          "column": 26,
          "position": 1830
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "import mongoose from \"mongoose\";\nimport Lead from \"../models/Lead\";\nimport { config } from \"dotenv\";\n\nconfig();\n\ninterface LeadJsonData {\n  first_name?: string;\n  firstName?: string;\n  last_name?: string;\n  lastName?: string;\n  phone_number?: string;\n  phoneNumber?: string;\n  email?: string;\n  state?: string;\n  city?: string;\n  zip_code?: string;\n  zipCode?: string;\n  birthday?: string;\n  dateOfBirth?: string;\n  height?: string;\n  weight?: string;\n  gender?: string;\n}\n\nconst fixLeadsFormat",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-leads-format.ts",
        "start": 1,
        "end": 26,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 26,
          "column": 15,
          "position": 177
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.ts",
        "start": 1,
        "end": 26,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 26,
          "column": 17,
          "position": 177
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ";\n        lead.disposition = lead.disposition || \"New Lead\";\n\n        // Update notes to include all available information\n        const notes = lead.notes || \"\";\n        const additionalInfo = `\\nLocation: ${lead.city}, ${lead.state} ${lead.zipcode}\nDOB: ${lead.dob}\nHeight: ${lead.height}\nWeight: ${lead.weight}\nGender: ${lead.gender}`;\n\n        // Only add the additional info if it's not already in the notes\n        if (!notes.includes(\"Location:\")) {\n          lead.notes = notes + additionalInfo;\n        }\n\n        // Save the updated lead\n        await lead.save();\n        console.log(`Updated lead: ${lead.name} (ID: ${lead._id})`);\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-leads-format.ts",
        "start": 102,
        "end": 121,
        "startLoc": {
          "line": 102,
          "column": 7,
          "position": 1089
        },
        "endLoc": {
          "line": 121,
          "column": 2,
          "position": 1251
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.ts",
        "start": 147,
        "end": 166,
        "startLoc": {
          "line": 147,
          "column": 3,
          "position": 1576
        },
        "endLoc": {
          "line": 166,
          "column": 8,
          "position": 1738
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ");\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"Finished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n};\n\nfixLeadsFormat",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-leads-format.ts",
        "start": 120,
        "end": 134,
        "startLoc": {
          "line": 120,
          "column": 3,
          "position": 1247
        },
        "endLoc": {
          "line": 134,
          "column": 15,
          "position": 1343
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.ts",
        "start": 177,
        "end": 191,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1839
        },
        "endLoc": {
          "line": 191,
          "column": 17,
          "position": 1935
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\nconst dotenv_1 = require(\"dotenv\");\n(0, dotenv_1.config)();\nconst fixLeadsFormat",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-leads-format.js",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 139
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 15,
          "position": 139
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": ";\n        lead.disposition = lead.disposition || \"New Lead\";\n        // Update notes to include all available information\n        const notes = lead.notes || \"\";\n        const additionalInfo = `\\nLocation: ${lead.city}, ${lead.state} ${lead.zipcode}\nDOB: ${lead.dob}\nHeight: ${lead.height}\nWeight: ${lead.weight}\nGender: ${lead.gender}`;\n        // Only add the additional info if it's not already in the notes\n        if (!notes.includes(\"Location:\")) {\n          lead.notes = notes + additionalInfo;\n        }\n        // Save the updated lead\n        await lead.save();\n        console.log(`Updated lead: ${lead.name} (ID: ${lead._id})`);\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-leads-format.js",
        "start": 79,
        "end": 95,
        "startLoc": {
          "line": 79,
          "column": 7,
          "position": 1043
        },
        "endLoc": {
          "line": 95,
          "column": 2,
          "position": 1202
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.js",
        "start": 121,
        "end": 137,
        "startLoc": {
          "line": 121,
          "column": 3,
          "position": 1527
        },
        "endLoc": {
          "line": 137,
          "column": 8,
          "position": 1686
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ");\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n    console.log(\"Finished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n};\nfixLeadsFormat",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-leads-format.js",
        "start": 94,
        "end": 106,
        "startLoc": {
          "line": 94,
          "column": 3,
          "position": 1198
        },
        "endLoc": {
          "line": 106,
          "column": 15,
          "position": 1292
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-specific-leads.js",
        "start": 148,
        "end": 160,
        "startLoc": {
          "line": 148,
          "column": 2,
          "position": 1787
        },
        "endLoc": {
          "line": 160,
          "column": 17,
          "position": 1881
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": ");\n\n    // Connect to MongoDB\n    await mongoose.connect(process.env.MONGODB_URI || \"\");\n    console.log(\"Connected to MongoDB\");\n\n    // Get admin user\n    const admin = await UserModel.findOne({ role: \"admin\" });\n    if (!admin) {\n      throw new Error(\"No admin user found\");\n    }\n\n    // Find all leads assigned to admin",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-lead-orders.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 29,
          "position": 68
        },
        "endLoc": {
          "line": 23,
          "column": 36,
          "position": 157
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reassign-leads.ts",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 32,
          "position": 68
        },
        "endLoc": {
          "line": 23,
          "column": 18,
          "position": 157
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\nconst User_1 = __importDefault(require(\"../models/User\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function fixLeadOrders",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-lead-orders.js",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 14,
          "position": 158
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 14,
          "position": 158
        }
      }
    },
    {
      "format": "javascript",
      "lines": 10,
      "fragment": ");\n    // Connect to MongoDB\n    await mongoose_1.default.connect(process.env.MONGODB_URI || \"\");\n    console.log(\"Connected to MongoDB\");\n    // Get admin user\n    const admin = await User_1.default.findOne({ role: \"admin\" });\n    if (!admin) {\n      throw new Error(\"No admin user found\");\n    }\n    // Find all leads assigned to admin",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-lead-orders.js",
        "start": 16,
        "end": 25,
        "startLoc": {
          "line": 16,
          "column": 29,
          "position": 175
        },
        "endLoc": {
          "line": 25,
          "column": 36,
          "position": 265
        }
      },
      "secondFile": {
        "name": "server/src/scripts/reassign-leads.js",
        "start": 16,
        "end": 25,
        "startLoc": {
          "line": 16,
          "column": 32,
          "position": 175
        },
        "endLoc": {
          "line": 25,
          "column": 18,
          "position": 265
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function fixAllNames",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/fix-all-names.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 12,
          "position": 143
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 143
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function deleteExclusiveLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/delete-exclusive-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 21,
          "position": 143
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 143
        }
      }
    },
    {
      "format": "javascript",
      "lines": 7,
      "fragment": "var __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIndexes",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/createIndexes.js",
        "start": 7,
        "end": 13,
        "startLoc": {
          "line": 7,
          "column": 1,
          "position": 5
        },
        "endLoc": {
          "line": 13,
          "column": 14,
          "position": 87
        }
      },
      "secondFile": {
        "name": "server/src/scripts/import-nextgen-leads.js",
        "start": 2,
        "end": 8,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 8,
          "column": 12,
          "position": 85
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ".forEach((lead) => {\n      console.log(`\\nID: ${lead._id}`);\n      console.log(`Name: ${lead.name}`);\n      console.log(`First Name: ${lead.firstName}`);\n      console.log(`Last Name: ${lead.lastName}`);\n      console.log(`Phone: ",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/check-leads.ts",
        "start": 46,
        "end": 51,
        "startLoc": {
          "line": 46,
          "column": 6,
          "position": 402
        },
        "endLoc": {
          "line": 51,
          "column": 9,
          "position": 478
        }
      },
      "secondFile": {
        "name": "server/src/scripts/check-leads.ts",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 15,
          "position": 268
        },
        "endLoc": {
          "line": 37,
          "column": 12,
          "position": 344
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function checkLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/check-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 11,
          "position": 143
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 143
        }
      }
    },
    {
      "format": "javascript",
      "lines": 6,
      "fragment": ".forEach((lead) => {\n      console.log(`\\nID: ${lead._id}`);\n      console.log(`Name: ${lead.name}`);\n      console.log(`First Name: ${lead.firstName}`);\n      console.log(`Last Name: ${lead.lastName}`);\n      console.log(`Phone: ",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/check-leads.js",
        "start": 46,
        "end": 51,
        "startLoc": {
          "line": 46,
          "column": 6,
          "position": 502
        },
        "endLoc": {
          "line": 51,
          "column": 9,
          "position": 578
        }
      },
      "secondFile": {
        "name": "server/src/scripts/check-leads.js",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 15,
          "position": 369
        },
        "endLoc": {
          "line": 38,
          "column": 12,
          "position": 445
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mongoose_1 = __importDefault(require(\"mongoose\"));\nconst dotenv_1 = __importDefault(require(\"dotenv\"));\nconst Lead_1 = __importDefault(require(\"../models/Lead\"));\n// Load environment variables\ndotenv_1.default.config();\nasync function addTestLead",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/scripts/add-test-lead.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 12,
          "position": 143
        }
      },
      "secondFile": {
        "name": "server/src/scripts/update-leads.js",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 143
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "(\"/calendly\", async (req, res) => {\n  try {\n    const userId = req.user._id;\n    const user = await User.findById(userId);\n\n    if (!user) {\n      return res\n        .status(404)\n        .json({ success: false, message: \"User not found\" });\n    }\n\n    // Remove Calendly integration",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/routes/integrations.routes.ts",
        "start": 110,
        "end": 121,
        "startLoc": {
          "line": 110,
          "column": 7,
          "position": 801
        },
        "endLoc": {
          "line": 121,
          "column": 31,
          "position": 903
        }
      },
      "secondFile": {
        "name": "server/src/routes/integrations.routes.ts",
        "start": 11,
        "end": 22,
        "startLoc": {
          "line": 11,
          "column": 4,
          "position": 66
        },
        "endLoc": {
          "line": 22,
          "column": 42,
          "position": 168
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "const user = await User.findById(userId);\n\n    if (!user) {\n      return res\n        .status(404)\n        .json({ success: false, message: \"User not found\" });\n    }\n\n    // Check if user has Calendly integration\n    if (!user.integrations || !user.integrations.calendly) {\n      return res\n        .status(400",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/routes/integrations.routes.ts",
        "start": 156,
        "end": 167,
        "startLoc": {
          "line": 156,
          "column": 5,
          "position": 1164
        },
        "endLoc": {
          "line": 167,
          "column": 4,
          "position": 1261
        }
      },
      "secondFile": {
        "name": "server/src/routes/integrations.routes.ts",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 5,
          "position": 103
        },
        "endLoc": {
          "line": 25,
          "column": 4,
          "position": 200
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "householdSize?: string;\n  householdIncome?: string;\n  military?: boolean;\n  pregnant?: boolean;\n  tobaccoUser?: boolean;\n  hasPrescription?: boolean;\n  hasMedicarePartsAB?: boolean;\n  hasMedicalCondition?: boolean;\n  medicalConditions?: string[];\n  insuranceTimeframe?: string;\n  // Campaign data",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/models/Lead.ts",
        "start": 34,
        "end": 44,
        "startLoc": {
          "line": 34,
          "column": 3,
          "position": 263
        },
        "endLoc": {
          "line": 44,
          "column": 17,
          "position": 345
        }
      },
      "secondFile": {
        "name": "server/src/utils/csvParser.ts",
        "start": 148,
        "end": 159,
        "startLoc": {
          "line": 148,
          "column": 3,
          "position": 848
        },
        "endLoc": {
          "line": 159,
          "column": 19,
          "position": 932
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n): Promise<void> => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      res.status(401).json({ error: \"Unauthorized\" });\n      return;\n    }\n\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/groupMe.controller.ts",
        "start": 326,
        "end": 337,
        "startLoc": {
          "line": 326,
          "column": 2,
          "position": 2602
        },
        "endLoc": {
          "line": 337,
          "column": 6,
          "position": 2694
        }
      },
      "secondFile": {
        "name": "server/src/controllers/groupMe.controller.ts",
        "start": 165,
        "end": 176,
        "startLoc": {
          "line": 165,
          "column": 2,
          "position": 1383
        },
        "endLoc": {
          "line": 176,
          "column": 6,
          "position": 1475
        }
      }
    },
    {
      "format": "typescript",
      "lines": 18,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n): Promise<void> => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      res.status(401).json({ error: \"Unauthorized\" });\n      return;\n    }\n\n    const service = await getUserGroupMeService(userId);\n    if (!service) {\n      res.status(401).json({ error: 'GroupMe not connected. Please connect your GroupMe account.' });\n      return;\n    }\n\n    const {",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/groupMe.controller.ts",
        "start": 354,
        "end": 371,
        "startLoc": {
          "line": 354,
          "column": 2,
          "position": 2836
        },
        "endLoc": {
          "line": 371,
          "column": 2,
          "position": 2984
        }
      },
      "secondFile": {
        "name": "server/src/controllers/groupMe.controller.ts",
        "start": 165,
        "end": 343,
        "startLoc": {
          "line": 165,
          "column": 2,
          "position": 1383
        },
        "endLoc": {
          "line": 343,
          "column": 7,
          "position": 2750
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n): Promise<void> => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      res.status(401).json({ error: \"Unauthorized\" });\n      return;\n    }\n\n    const service = await getUserGroupMeService(userId);\n    if (!service) {\n      res.status(401).json({ error: 'GroupMe not connected. Please connect your GroupMe account.' });\n      return;\n    }\n\n    const { groupId } = req.params;\n    const { text",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/groupMe.controller.ts",
        "start": 447,
        "end": 465,
        "startLoc": {
          "line": 447,
          "column": 2,
          "position": 3605
        },
        "endLoc": {
          "line": 465,
          "column": 5,
          "position": 3771
        }
      },
      "secondFile": {
        "name": "server/src/controllers/groupMe.controller.ts",
        "start": 165,
        "end": 372,
        "startLoc": {
          "line": 165,
          "column": 2,
          "position": 1383
        },
        "endLoc": {
          "line": 372,
          "column": 10,
          "position": 3002
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ");\n\n    // Encode the email\n    const email = emailLines.join(\"\\r\\n\").trim();\n    const encodedEmail = Buffer.from(email)\n      .toString(\"base64\")\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n\n    // Send the email\n    const response = await gmail.users.messages.send({\n      userId: \"me\",\n      requestBody: {\n        raw: encodedEmail,\n      },\n    });\n\n    res",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/gmail.controller.ts",
        "start": 355,
        "end": 373,
        "startLoc": {
          "line": 355,
          "column": 5,
          "position": 2937
        },
        "endLoc": {
          "line": 373,
          "column": 4,
          "position": 3069
        }
      },
      "secondFile": {
        "name": "server/src/services/campaignScheduler.ts",
        "start": 108,
        "end": 126,
        "startLoc": {
          "line": 108,
          "column": 17,
          "position": 860
        },
        "endLoc": {
          "line": 126,
          "column": 33,
          "position": 992
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "= async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const messageId = req.params.id;\n\n    if (!messageId) {\n      return res.status(400).json({ message: \"Message ID is required\" });\n    }\n\n    // Get Gmail client\n    const gmail = await getGmailClient(req.user.id);\n\n    // Move the message to trash",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/gmail.controller.ts",
        "start": 411,
        "end": 426,
        "startLoc": {
          "line": 411,
          "column": 2,
          "position": 3364
        },
        "endLoc": {
          "line": 426,
          "column": 29,
          "position": 3508
        }
      },
      "secondFile": {
        "name": "server/src/controllers/gmail.controller.ts",
        "start": 291,
        "end": 306,
        "startLoc": {
          "line": 291,
          "column": 2,
          "position": 2339
        },
        "endLoc": {
          "line": 306,
          "column": 25,
          "position": 2483
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const { name, subject, body, description } = req.body;\n\n    // Validate required fields\n    if (!name || !subject || !body) {\n      return res\n        .status(400)\n        .json({ message: \"Name, subject, and body are required\" });\n    }\n\n    // Find and update the template",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/emailTemplate.controller.ts",
        "start": 105,
        "end": 123,
        "startLoc": {
          "line": 105,
          "column": 2,
          "position": 768
        },
        "endLoc": {
          "line": 123,
          "column": 32,
          "position": 922
        }
      },
      "secondFile": {
        "name": "server/src/controllers/emailTemplate.controller.ts",
        "start": 15,
        "end": 33,
        "startLoc": {
          "line": 15,
          "column": 2,
          "position": 75
        },
        "endLoc": {
          "line": 33,
          "column": 23,
          "position": 229
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "= async (req: Request, res: Response) => {\n  try {\n    const { documentId } = req.params;\n\n    if (!mongoose.Types.ObjectId.isValid(documentId)) {\n      return res.status(400).json({ error: 'Invalid document ID' });\n    }\n\n    const document = await DocumentModel.findById(documentId);\n    \n    if (!document) {\n      return res.json",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/documents.controller.ts",
        "start": 216,
        "end": 227,
        "startLoc": {
          "line": 216,
          "column": 2,
          "position": 1974
        },
        "endLoc": {
          "line": 227,
          "column": 5,
          "position": 2097
        }
      },
      "secondFile": {
        "name": "server/src/controllers/documents.controller.ts",
        "start": 151,
        "end": 162,
        "startLoc": {
          "line": 151,
          "column": 2,
          "position": 1384
        },
        "endLoc": {
          "line": 162,
          "column": 7,
          "position": 1507
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "= async (req: Request, res: Response) => {\n  try {\n    if (!req.user?._id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const { id } = req.params;\n\n    // Find the disposition",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/dispositions.controller.ts",
        "start": 141,
        "end": 149,
        "startLoc": {
          "line": 141,
          "column": 2,
          "position": 1352
        },
        "endLoc": {
          "line": 149,
          "column": 24,
          "position": 1438
        }
      },
      "secondFile": {
        "name": "server/src/controllers/dispositions.controller.ts",
        "start": 92,
        "end": 99,
        "startLoc": {
          "line": 92,
          "column": 2,
          "position": 876
        },
        "endLoc": {
          "line": 99,
          "column": 6,
          "position": 961
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "// Default dispositions data\n    const defaultDispositions = [\n      { name: \"Positive Contact\", color: \"#38A169\", sortOrder: 0 },\n      { name: \"Negative Contact\", color: \"#E53E3E\", sortOrder: 1 },\n      { name: \"Employer Coverage\", color: \"#2196F3\", sortOrder: 2 },\n      { name: \"Brokie\", color: \"#FF9800\", sortOrder: 3 },\n      { name: \"Buy Or Die\", color: \"#9C27B0\", sortOrder: 4 },\n      { name: \"Unhealthy/Referred\", color: \"#795548\", sortOrder: 5 },\n      { name: \"Foreign\", color: \"#607D8B\", sortOrder: 6 },\n      { name: \"Quoted\", color: \"#00BCD4\", sortOrder: 7 },\n      { name: \"SOLD\", color: \"#84CC16\", sortOrder: 8 },\n      { name: \"Appointment\", color: \"#FFC107\", sortOrder: 9 },\n      { name: \"No Contact\", color: \"#805AD5\", sortOrder: 10 },\n      { name: \"Invalid/Disconnected\", color: \"#E91E63\", sortOrder: 11 },\n      { name: \"Hung Up\", color: \"#9E9E9E\", sortOrder: 12 },\n      { name: \"Ghosted\", color: \"#E6F0F5\", sortOrder: 13, emoji: \"👻\" },\n    ];\n\n    // Check if we have any dispositions",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/dispositions.controller.ts",
        "start": 272,
        "end": 290,
        "startLoc": {
          "line": 272,
          "column": 5,
          "position": 2648
        },
        "endLoc": {
          "line": 290,
          "column": 37,
          "position": 2993
        }
      },
      "secondFile": {
        "name": "server/src/controllers/dispositions.controller.ts",
        "start": 200,
        "end": 218,
        "startLoc": {
          "line": 200,
          "column": 5,
          "position": 1899
        },
        "endLoc": {
          "line": 218,
          "column": 49,
          "position": 2244
        }
      }
    },
    {
      "format": "typescript",
      "lines": 31,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const { name, steps, startDate, recipients } = req.body;\n\n    // Validate required fields\n    if (!name || !steps || !startDate || !recipients || !recipients.length) {\n      return res.status(400).json({\n        message:\n          \"Name, steps, start date, and at least one recipient are required\",\n      });\n    }\n\n    // Validate steps have templateId and delayDays\n    if (\n      !steps.every(\n        (step: any) => step.templateId && typeof step.delayDays === \"number\",\n      )\n    ) {\n      return res.status(400).json({\n        message: \"Each step must have a templateId and delayDays\",\n      });\n    }\n\n    // Find the campaign",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 128,
        "end": 158,
        "startLoc": {
          "line": 128,
          "column": 2,
          "position": 966
        },
        "endLoc": {
          "line": 158,
          "column": 21,
          "position": 1212
        }
      },
      "secondFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 18,
        "end": 48,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 102
        },
        "endLoc": {
          "line": 48,
          "column": 19,
          "position": 348
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "const campaign = await Campaign.findOne({\n      _id: req.params.id,\n      userId: req.user.id,\n    });\n\n    if (!campaign) {\n      return res.status(404).json({ message: \"Campaign not found\" });\n    }\n\n    // Prevent updates to active or completed campaigns",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 159,
        "end": 168,
        "startLoc": {
          "line": 159,
          "column": 5,
          "position": 1215
        },
        "endLoc": {
          "line": 168,
          "column": 52,
          "position": 1295
        }
      },
      "secondFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 109,
        "end": 118,
        "startLoc": {
          "line": 109,
          "column": 5,
          "position": 819
        },
        "endLoc": {
          "line": 118,
          "column": 4,
          "position": 899
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const campaign = await Campaign.findOne({\n      _id: req.params.id,\n      userId: req.user.id,\n    });\n\n    if (!campaign) {\n      return res.status(404).json({ message: \"Campaign not found\" });\n    }\n\n    // Don't delete active campaigns",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 194,
        "end": 212,
        "startLoc": {
          "line": 194,
          "column": 2,
          "position": 1488
        },
        "endLoc": {
          "line": 212,
          "column": 33,
          "position": 1642
        }
      },
      "secondFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 100,
        "end": 118,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 745
        },
        "endLoc": {
          "line": 118,
          "column": 4,
          "position": 899
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const { status } = req.body",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 231,
        "end": 240,
        "startLoc": {
          "line": 231,
          "column": 2,
          "position": 1787
        },
        "endLoc": {
          "line": 240,
          "column": 5,
          "position": 1873
        }
      },
      "secondFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 71,
        "end": 80,
        "startLoc": {
          "line": 71,
          "column": 2,
          "position": 496
        },
        "endLoc": {
          "line": 80,
          "column": 6,
          "position": 582
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "});\n    }\n\n    const campaign = await Campaign.findOne({\n      _id: req.params.id,\n      userId: req.user.id,\n    });\n\n    if (!campaign) {\n      return res.status(404).json({ message: \"Campaign not found\" });\n    }\n\n    // Don't update completed campaigns",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 246,
        "end": 258,
        "startLoc": {
          "line": 246,
          "column": 7,
          "position": 1927
        },
        "endLoc": {
          "line": 258,
          "column": 36,
          "position": 2016
        }
      },
      "secondFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 106,
        "end": 118,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 810
        },
        "endLoc": {
          "line": 118,
          "column": 4,
          "position": 899
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "= async (\n  req: AuthenticatedRequest,\n  res: Response,\n) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ message: \"User not authenticated\" });\n    }\n\n    const campaign = await Campaign.findOne({\n      _id: req.params.id,\n      userId: req.user.id,\n    });\n\n    if (!campaign) {\n      return res.status(404).json({ message: \"Campaign not found\" });\n    }\n\n    // Calculate metrics",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 278,
        "end": 296,
        "startLoc": {
          "line": 278,
          "column": 2,
          "position": 2152
        },
        "endLoc": {
          "line": 296,
          "column": 21,
          "position": 2306
        }
      },
      "secondFile": {
        "name": "server/src/controllers/campaign.controller.ts",
        "start": 100,
        "end": 118,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 745
        },
        "endLoc": {
          "line": 118,
          "column": 4,
          "position": 899
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "const userResponse = {\n      _id: user._id.toString(),\n      id: user._id.toString(), // Add id for client compatibility\n      name: user.name,\n      email: user.email,\n      profilePicture: user.profilePicture,\n      role: user.role,\n    };\n\n    res.json(userResponse);\n  } catch (error) {\n    console.error(\"Error updating profile:\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/src/controllers/auth.controller.ts",
        "start": 249,
        "end": 260,
        "startLoc": {
          "line": 249,
          "column": 5,
          "position": 2179
        },
        "endLoc": {
          "line": 260,
          "column": 26,
          "position": 2281
        }
      },
      "secondFile": {
        "name": "server/src/controllers/auth.controller.ts",
        "start": 156,
        "end": 166,
        "startLoc": {
          "line": 156,
          "column": 5,
          "position": 1322
        },
        "endLoc": {
          "line": 166,
          "column": 21,
          "position": 1423
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "const totalLeads = await db.collection(\"leads\").countDocuments({});\n      console.log(`🎯 TOTAL LEADS IN DATABASE: ${totalLeads}\\n`);\n\n      if (totalLeads > 1500) {\n        console.log(`✅ FOUND YOUR ~2K LEADS! (${totalLeads} total)`);\n      }\n\n      await mongoose.disconnect();\n    } catch (error2",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/tests/test-linkpellowinsurance.js",
        "start": 41,
        "end": 49,
        "startLoc": {
          "line": 41,
          "column": 7,
          "position": 293
        },
        "endLoc": {
          "line": 49,
          "column": 7,
          "position": 375
        }
      },
      "secondFile": {
        "name": "server/scripts/tests/test-linkpellowinsurance.js",
        "start": 21,
        "end": 29,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 119
        },
        "endLoc": {
          "line": 29,
          "column": 6,
          "position": 201
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ");\n\n    const db = mongoose.connection.db;\n\n    // Get total count of ALL leads\n    const totalLeads = await db.collection(\"leads\").countDocuments({});\n    console.log(`🎯 TOTAL LEADS IN DATABASE: ${totalLeads}\\n`);\n\n    if (totalLeads > 1500) {\n      console.log(`✅ FOUND YOUR ~2K LEADS! (${totalLeads} total)`);\n      console",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/tests/test-linkpellow-user.js",
        "start": 16,
        "end": 26,
        "startLoc": {
          "line": 16,
          "column": 47,
          "position": 94
        },
        "endLoc": {
          "line": 26,
          "column": 8,
          "position": 180
        }
      },
      "secondFile": {
        "name": "server/scripts/tests/test-linkpellowinsurance.js",
        "start": 16,
        "end": 26,
        "startLoc": {
          "line": 16,
          "column": 30,
          "position": 96
        },
        "endLoc": {
          "line": 26,
          "column": 2,
          "position": 182
        }
      }
    },
    {
      "format": "javascript",
      "lines": 18,
      "fragment": ");\n    console.log(\n      \"Connection string:\",\n      MONGODB_URI.replace(/:[^:@]+@/, \":****@\"),\n    );\n\n    await mongoose.connect(MONGODB_URI);\n    console.log(\"✅ Connected successfully to MongoDB Atlas!\\n\");\n\n    const db = mongoose.connection.db;\n\n    // Get total count of ALL leads\n    const totalLeads = await db.collection(\"leads\").countDocuments({});\n    console.log(`🎯 TOTAL LEADS IN DATABASE: ${totalLeads}\\n`);\n\n    if (totalLeads > 1500) {\n      console.log(`✅ FOUND YOUR ~2K LEADS! (${totalLeads} total)`);\n    } else",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/tests/test-dialer-app-user.js",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 45,
          "position": 47
        },
        "endLoc": {
          "line": 26,
          "column": 5,
          "position": 182
        }
      },
      "secondFile": {
        "name": "server/scripts/tests/test-linkpellow-user.js",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 49,
          "position": 47
        },
        "endLoc": {
          "line": 28,
          "column": 6,
          "position": 186
        }
      }
    },
    {
      "format": "javascript",
      "lines": 30,
      "fragment": ");\n\n// Get the CSV file path from command line argument or use default\nconst csvPath =\n  process.argv[2] || path.join(__dirname, \"../csv/your-leads.csv\");\n\nasync function importLeads() {\n  try {\n    // Using the working credentials\n    const mongoUri =\n      \"mongodb+srv://linkpellow:admin123@linkpellow.ygw6y.mongodb.net/dialer_app?retryWrites=true&w=majority&appName=linkpellow\";\n    console.log(\"Connecting to MongoDB...\");\n    await mongoose.connect(mongoUri);\n    console.log(\"Connected to MongoDB\");\n\n    // Import the Lead model\n    const Lead = mongoose.model(\n      \"Lead\",\n      new mongoose.Schema({\n        name: String,\n        firstName: String,\n        lastName: String,\n        phone: { type: String, required: true },\n        email: String,\n        status: { type: String, default: \"New\" },\n        source: { type: String, default: \"CSV Import\" },\n        notes: String,\n        createdAt: { type: Date, default: Date.now },\n        order: Number,\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/migration/import-leads-fixed.js",
        "start": 3,
        "end": 32,
        "startLoc": {
          "line": 3,
          "column": 11,
          "position": 33
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 279
        }
      },
      "secondFile": {
        "name": "server/scripts/migration/import-leads-universal.js",
        "start": 4,
        "end": 33,
        "startLoc": {
          "line": 4,
          "column": 17,
          "position": 45
        },
        "endLoc": {
          "line": 33,
          "column": 11,
          "position": 291
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "let imported = 0;\n    let skipped = 0;\n    let errors = 0;\n\n    // Get the highest order number\n    const maxOrderLead = await Lead.findOne().sort({ order: -1 });\n    let currentOrder = (maxOrderLead?.order || 0) + 1;\n\n    // Track processed phones to avoid duplicates\n    const existingPhones = new Set();\n    const existingLeads = await Lead.find({}, \"phone\");\n    existingLeads.forEach((lead) => existingPhones.add(lead.phone));\n\n    console.log(`Found ${existingPhones.size} existing leads in database`",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/migration/import-leads-fixed.js",
        "start": 51,
        "end": 64,
        "startLoc": {
          "line": 51,
          "column": 5,
          "position": 468
        },
        "endLoc": {
          "line": 64,
          "column": 29,
          "position": 626
        }
      },
      "secondFile": {
        "name": "server/scripts/migration/import-leads-universal.js",
        "start": 100,
        "end": 113,
        "startLoc": {
          "line": 100,
          "column": 5,
          "position": 866
        },
        "endLoc": {
          "line": 113,
          "column": 31,
          "position": 1024
        }
      }
    },
    {
      "format": "javascript",
      "lines": 23,
      "fragment": "}: ${error.message}`);\n        errors++;\n      }\n    }\n\n    console.log(\"\\n========== IMPORT SUMMARY ==========\");\n    console.log(`✅ Successfully imported: ${imported} leads`);\n    console.log(`⏭️  Skipped (duplicates/no phone): ${skipped} rows`);\n    console.log(`❌ Errors: ${errors} rows`);\n    console.log(\n      `📊 Total leads now in database: ${existingPhones.size + imported}`,\n    );\n    console.log(\"====================================\\n\");\n\n    await mongoose.disconnect();\n    console.log(\"Disconnected from MongoDB\");\n  } catch (error) {\n    console.error(\"Fatal error:\", error);\n    process.exit(1);\n  }\n}\n\nimportLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/migration/import-leads-fixed.js",
        "start": 129,
        "end": 151,
        "startLoc": {
          "line": 129,
          "column": 2,
          "position": 1199
        },
        "endLoc": {
          "line": 151,
          "column": 12,
          "position": 1359
        }
      },
      "secondFile": {
        "name": "server/scripts/migration/import-leads-universal.js",
        "start": 331,
        "end": 353,
        "startLoc": {
          "line": 331,
          "column": 2,
          "position": 2612
        },
        "endLoc": {
          "line": 353,
          "column": 35,
          "position": 2772
        }
      }
    },
    {
      "format": "javascript",
      "lines": 16,
      "fragment": ",\n        });\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"\\nFinished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n}\n\nupdateTodaysLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 78,
        "end": 93,
        "startLoc": {
          "line": 78,
          "column": 12,
          "position": 614
        },
        "endLoc": {
          "line": 93,
          "column": 18,
          "position": 713
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-missing-info.js",
        "start": 110,
        "end": 122,
        "startLoc": {
          "line": 110,
          "column": 7,
          "position": 1320
        },
        "endLoc": {
          "line": 122,
          "column": 2,
          "position": 1416
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function updateNewLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/update-new-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 15,
          "position": 264
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": "const Lead = mongoose.model(\n      \"Lead\",\n      new mongoose.Schema({\n        name: String,\n        firstName: String,\n        lastName: String,\n        phone: { type: String, required: true },\n        email: String,\n        status: { type: String, default: \"New\" },\n        source: { type: String, default: \"CSV Import\" },\n        notes: String,\n        createdAt: { type: Date, default: Date.now },\n        order: Number,\n        leadSource: String,\n        originalStatus: String,\n        importedAt: Date,\n        address",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-zipcode-decimals.js",
        "start": 14,
        "end": 30,
        "startLoc": {
          "line": 14,
          "column": 5,
          "position": 75
        },
        "endLoc": {
          "line": 30,
          "column": 8,
          "position": 245
        }
      },
      "secondFile": {
        "name": "server/scripts/migration/import-leads-universal.js",
        "start": 20,
        "end": 36,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 142
        },
        "endLoc": {
          "line": 36,
          "column": 43,
          "position": 312
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function fixWalter",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-walter.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 10,
          "position": 264
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": "lead.disposition = \"New Lead\";\n\n    // Add golden badge to notes if not already present\n    if (!lead.notes || !lead.notes.includes(\"🌟 New Lead\")) {\n      lead.notes = lead.notes ? `${lead.notes}\\n\\n🌟 New Lead` : \"🌟 New Lead\";\n    }\n\n    await lead.save();\n    console.log(\"Updated lead:\", {\n      name: lead.name,\n      firstName",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-walter.js",
        "start": 58,
        "end": 68,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 453
        },
        "endLoc": {
          "line": 68,
          "column": 10,
          "position": 550
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-new-leads.js",
        "start": 67,
        "end": 79,
        "startLoc": {
          "line": 67,
          "column": 7,
          "position": 527
        },
        "endLoc": {
          "line": 79,
          "column": 12,
          "position": 626
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function fixSpecificLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-specific-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 17,
          "position": 264
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": "}\n\n          // Save the updated lead\n          await lead.save();\n          console.log(\"Updated lead data:\", {\n            name: lead.name,\n            email: lead.email,\n            city: lead.city,\n            state: lead.state,\n            zipcode: lead.zipcode,\n            dob: lead.dob,\n            height: lead.height,\n            weight: lead.weight,\n            gender: lead.gender,\n          });\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-specific-leads.js",
        "start": 102,
        "end": 118,
        "startLoc": {
          "line": 102,
          "column": 11,
          "position": 849
        },
        "endLoc": {
          "line": 118,
          "column": 2,
          "position": 965
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-missing-info.js",
        "start": 98,
        "end": 112,
        "startLoc": {
          "line": 98,
          "column": 9,
          "position": 1216
        },
        "endLoc": {
          "line": 112,
          "column": 6,
          "position": 1330
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "} catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"\\nFinished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n}\n\nfixSpecificLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-specific-leads.js",
        "start": 118,
        "end": 131,
        "startLoc": {
          "line": 118,
          "column": 7,
          "position": 965
        },
        "endLoc": {
          "line": 131,
          "column": 17,
          "position": 1056
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-missing-info.js",
        "start": 112,
        "end": 122,
        "startLoc": {
          "line": 112,
          "column": 7,
          "position": 1328
        },
        "endLoc": {
          "line": 122,
          "column": 2,
          "position": 1416
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\n// Function to convert height to proper format (e.g., \"71\" to \"7'1\")",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-specific-leads-format.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 69,
          "position": 260
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 6,
          "position": 260
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": ",\n          });\n        }\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"\\nFinished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n}\n\nfixSpecificLeads();",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-specific-leads-format.js",
        "start": 119,
        "end": 135,
        "startLoc": {
          "line": 119,
          "column": 7,
          "position": 888
        },
        "endLoc": {
          "line": 135,
          "column": 2,
          "position": 993
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/fix-specific-leads.js",
        "start": 115,
        "end": 131,
        "startLoc": {
          "line": 115,
          "column": 7,
          "position": 954
        },
        "endLoc": {
          "line": 131,
          "column": 2,
          "position": 1059
        }
      }
    },
    {
      "format": "javascript",
      "lines": 32,
      "fragment": "() {\n  try {\n    console.log(\"Connecting to MongoDB...\");\n    await mongoose.connect(MONGODB_URI);\n    console.log(\"Connected to MongoDB\\n\");\n\n    // Define the Lead schema\n    const Lead = mongoose.model(\n      \"Lead\",\n      new mongoose.Schema({\n        name: String,\n        firstName: String,\n        lastName: String,\n        phone: { type: String, required: true },\n        email: String,\n        status: { type: String, default: \"New\" },\n        source: { type: String, default: \"CSV Import\" },\n        notes: String,\n        createdAt: { type: Date, default: Date.now },\n        order: Number,\n        leadSource: String,\n        originalStatus: String,\n        importedAt: Date,\n        address: String,\n        city: String,\n        state: String,\n        zipcode: String,\n        dateOfBirth: String,\n      }),\n    );\n\n    // Find leads with NextGen in notes but wrong source",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-nextgen-source.js",
        "start": 7,
        "end": 38,
        "startLoc": {
          "line": 7,
          "column": 17,
          "position": 31
        },
        "endLoc": {
          "line": 38,
          "column": 53,
          "position": 290
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/fix-zipcode-decimals.js",
        "start": 7,
        "end": 38,
        "startLoc": {
          "line": 7,
          "column": 12,
          "position": 31
        },
        "endLoc": {
          "line": 38,
          "column": 45,
          "position": 290
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function fixNames",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-names.js",
        "start": 13,
        "end": 43,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 28
        },
        "endLoc": {
          "line": 43,
          "column": 9,
          "position": 292
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function fixName",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-name.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 264
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function fixLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 9,
          "position": 264
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 118,
      "fragment": ".find({\n      $or: [\n        { state: { $in: [\"\", null, undefined] } },\n        { city: { $in: [\"\", null, undefined] } },\n        { zipcode: { $in: [\"\", null, undefined] } },\n        { dob: { $in: [\"\", null, undefined] } },\n        { height: { $in: [\"\", null, undefined] } },\n        { weight: { $in: [\"\", null, undefined] } },\n        { gender: { $in: [\"\", null, undefined] } },\n      ],\n    });\n\n    console.log(`Found ${leads.length} leads with missing information`);\n\n    for (const lead of leads) {\n      try {\n        console.log(\"\\nProcessing lead:\", {\n          id: lead._id,\n          name: lead.name,\n          email: lead.email,\n        });\n\n        // Extract location information from notes\n        if (lead.notes && lead.notes.includes(\"Location:\")) {\n          const locationMatch = lead.notes.match(\n            /Location: ([^,]+), ([A-Z]{2}) (\\d{5})/,\n          );\n          if (locationMatch) {\n            lead.city = locationMatch[1].trim();\n            lead.state = locationMatch[2].trim();\n            lead.zipcode = locationMatch[3].trim();\n            console.log(\"Extracted location:\", {\n              city: lead.city,\n              state: lead.state,\n              zipcode: lead.zipcode,\n            });\n          }\n        }\n\n        // Try to extract other information from notes\n        if (lead.notes) {\n          // Extract DOB\n          const dobMatch = lead.notes.match(/DOB: ([^\\n]+)/);\n          if (dobMatch && dobMatch[1].trim() !== \"\") {\n            lead.dob = dobMatch[1].trim();\n          }\n\n          // Extract Height\n          const heightMatch = lead.notes.match(/Height: ([^\\n]+)/);\n          if (heightMatch && heightMatch[1].trim() !== \"\") {\n            lead.height = heightMatch[1].trim();\n          }\n\n          // Extract Weight\n          const weightMatch = lead.notes.match(/Weight: ([^\\n]+)/);\n          if (weightMatch && weightMatch[1].trim() !== \"\") {\n            lead.weight = weightMatch[1].trim();\n          }\n\n          // Extract Gender\n          const genderMatch = lead.notes.match(/Gender: ([^\\n]+)/);\n          if (genderMatch && genderMatch[1].trim() !== \"\") {\n            lead.gender = genderMatch[1].trim();\n          }\n        }\n\n        // If still missing information, try to extract from JSON in notes\n        if (lead.notes && lead.notes.includes(\"{\")) {\n          try {\n            const jsonMatch = lead.notes.match(/\\{[^}]+\\}/);\n            if (jsonMatch) {\n              const jsonData = JSON.parse(jsonMatch[0]);\n\n              // Extract missing fields from JSON\n              if (!lead.city && jsonData.city) lead.city = jsonData.city;\n              if (!lead.state && jsonData.state) lead.state = jsonData.state;\n              if (!lead.zipcode && jsonData.zip_code)\n                lead.zipcode = jsonData.zip_code;\n              if (!lead.dob && jsonData.birthday) lead.dob = jsonData.birthday;\n              if (!lead.height && jsonData.height)\n                lead.height = jsonData.height;\n              if (!lead.weight && jsonData.weight)\n                lead.weight = jsonData.weight;\n              if (!lead.gender && jsonData.gender)\n                lead.gender = jsonData.gender;\n            }\n          } catch (e) {\n            console.log(\"Could not parse JSON from notes\");\n          }\n        }\n\n        // Save the updated lead\n        await lead.save();\n        console.log(\"Updated lead data:\", {\n          name: lead.name,\n          email: lead.email,\n          city: lead.city,\n          state: lead.state,\n          zipcode: lead.zipcode,\n          dob: lead.dob,\n          height: lead.height,\n          weight: lead.weight,\n          gender: lead.gender,\n        });\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"\\nFinished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n}\n\nfixLeads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-leads.js",
        "start": 38,
        "end": 155,
        "startLoc": {
          "line": 38,
          "column": 5,
          "position": 316
        },
        "endLoc": {
          "line": 155,
          "column": 9,
          "position": 1540
        }
      },
      "secondFile": {
        "name": "server/src/scripts/fix-missing-info.js",
        "start": 18,
        "end": 122,
        "startLoc": {
          "line": 18,
          "column": 8,
          "position": 205
        },
        "endLoc": {
          "line": 122,
          "column": 2,
          "position": 1416
        }
      }
    },
    {
      "format": "javascript",
      "lines": 31,
      "fragment": "require(\"dotenv\").config();\nconst mongoose = require(\"mongoose\");\nconst { Schema } = mongoose;\n\n// Define Lead schema\nconst leadSchema = new Schema({\n  name: String,\n  firstName: String,\n  lastName: String,\n  phone: String,\n  email: String,\n  status: String,\n  source: String,\n  notes: String,\n  assignedTo: Schema.Types.ObjectId,\n  disposition: String,\n  state: String,\n  city: String,\n  zipcode: String,\n  dob: String,\n  height: String,\n  weight: String,\n  gender: String,\n  order: { type: Number, default: 0 },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst Lead = mongoose.model(\"Lead\", leadSchema);\n\nasync function fixHeightFormat",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-height-format.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 16,
          "position": 264
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/update-todays-leads.js",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 18,
          "position": 264
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": ",\n          });\n        }\n      } catch (error) {\n        console.error(`Error updating lead ${lead._id}:`, error);\n      }\n    }\n\n    console.log(\"\\nFinished updating leads\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"Script error:\", error);\n    process.exit(1);\n  }\n}\n\nfixHeightFormat",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/fixes/fix-height-format.js",
        "start": 65,
        "end": 81,
        "startLoc": {
          "line": 65,
          "column": 7,
          "position": 551
        },
        "endLoc": {
          "line": 81,
          "column": 16,
          "position": 653
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/fix-specific-leads.js",
        "start": 115,
        "end": 122,
        "startLoc": {
          "line": 115,
          "column": 7,
          "position": 954
        },
        "endLoc": {
          "line": 122,
          "column": 2,
          "position": 1416
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": "() {\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    console.log(\"Connected to MongoDB Atlas\\n\");\n\n    const adminDb = client.db().admin();\n    const databasesList = await adminDb.listDatabases();\n\n    console.log(\"=== DEEP SEARCH FOR LEADS DATA ===\\n\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/deep-search-leads.js",
        "start": 6,
        "end": 16,
        "startLoc": {
          "line": 6,
          "column": 19,
          "position": 33
        },
        "endLoc": {
          "line": 16,
          "column": 39,
          "position": 119
        }
      },
      "secondFile": {
        "name": "server/scripts/analysis/find-all-leads.js",
        "start": 6,
        "end": 17,
        "startLoc": {
          "line": 6,
          "column": 13,
          "position": 33
        },
        "endLoc": {
          "line": 17,
          "column": 73,
          "position": 121
        }
      }
    },
    {
      "format": "javascript",
      "lines": 6,
      "fragment": ");\n              samples.forEach((doc, i) => {\n                const info = [];\n                if (doc.name) info.push(`name: ${doc.name}`);\n                if (doc.firstName) info.push(`firstName: ${doc.firstName}`);\n                if (doc.lastName",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/deep-search-leads.js",
        "start": 73,
        "end": 78,
        "startLoc": {
          "line": 73,
          "column": 20,
          "position": 559
        },
        "endLoc": {
          "line": 78,
          "column": 9,
          "position": 641
        }
      },
      "secondFile": {
        "name": "server/scripts/analysis/find-all-leads.js",
        "start": 62,
        "end": 67,
        "startLoc": {
          "line": 62,
          "column": 21,
          "position": 495
        },
        "endLoc": {
          "line": 67,
          "column": 6,
          "position": 577
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "= await db\n      .collection(\"leads\")\n      .aggregate([\n        { $group: { _id: \"$source\", count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ])\n      .toArray();\n\n    console.log(\"\\nLeads by source:\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-real-database.js",
        "start": 41,
        "end": 49,
        "startLoc": {
          "line": 41,
          "column": 2,
          "position": 308
        },
        "endLoc": {
          "line": 49,
          "column": 21,
          "position": 394
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/delete-all-phoneless-leads.js",
        "start": 37,
        "end": 45,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 328
        },
        "endLoc": {
          "line": 45,
          "column": 24,
          "position": 414
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": ");\n    });\n\n    // Check users\n    const users = await db.collection(\"users\").find({}).toArray();\n    console.log(`\\nUsers in database: ${users.length}`);\n    users.forEach((user) => {\n      console.log(`  - ${user.email} (${user.name})`",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-real-database.js",
        "start": 51,
        "end": 58,
        "startLoc": {
          "line": 51,
          "column": 8,
          "position": 432
        },
        "endLoc": {
          "line": 58,
          "column": 3,
          "position": 516
        }
      },
      "secondFile": {
        "name": "server/scripts/tests/test-dialer-app-user.js",
        "start": 39,
        "end": 46,
        "startLoc": {
          "line": 39,
          "column": 2,
          "position": 292
        },
        "endLoc": {
          "line": 46,
          "column": 9,
          "position": 376
        }
      }
    },
    {
      "format": "javascript",
      "lines": 32,
      "fragment": "() {\n  try {\n    console.log(\"Connecting to MongoDB...\");\n    await mongoose.connect(MONGODB_URI);\n    console.log(\"Connected to MongoDB\\n\");\n\n    // Define the Lead schema\n    const Lead = mongoose.model(\n      \"Lead\",\n      new mongoose.Schema({\n        name: String,\n        firstName: String,\n        lastName: String,\n        phone: { type: String, required: true },\n        email: String,\n        status: { type: String, default: \"New\" },\n        source: { type: String, default: \"CSV Import\" },\n        notes: String,\n        createdAt: { type: Date, default: Date.now },\n        order: Number,\n        leadSource: String,\n        originalStatus: String,\n        importedAt: Date,\n        address: String,\n        city: String,\n        state: String,\n        zipcode: String,\n        dateOfBirth: String,\n      }),\n    );\n\n    // Get total count",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-lead-sources.js",
        "start": 7,
        "end": 38,
        "startLoc": {
          "line": 7,
          "column": 17,
          "position": 31
        },
        "endLoc": {
          "line": 38,
          "column": 19,
          "position": 290
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/fix-zipcode-decimals.js",
        "start": 7,
        "end": 38,
        "startLoc": {
          "line": 7,
          "column": 12,
          "position": 31
        },
        "endLoc": {
          "line": 38,
          "column": 45,
          "position": 290
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ");\n    const sourceCounts = await Lead.aggregate([\n      {\n        $group: {\n          _id: \"$source\",\n          count: { $sum: 1 },\n        },\n      },\n      { $sort: { count: -1 } },\n    ]);\n\n    sourceCounts.forEach((item) => {\n      console.log(`- ${item._id ",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-lead-sources.js",
        "start": 59,
        "end": 71,
        "startLoc": {
          "line": 59,
          "column": 27,
          "position": 464
        },
        "endLoc": {
          "line": 71,
          "column": 5,
          "position": 567
        }
      },
      "secondFile": {
        "name": "server/scripts/fixes/fix-nextgen-source.js",
        "start": 61,
        "end": 73,
        "startLoc": {
          "line": 61,
          "column": 33,
          "position": 471
        },
        "endLoc": {
          "line": 73,
          "column": 4,
          "position": 574
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ");\n\n    const db = mongoose.connection.db;\n\n    // Get total count of ALL leads\n    const totalLeads = await db.collection(\"leads\").countDocuments({});\n    console.log(`🎯 TOTAL LEADS IN DATABASE: ${totalLeads}\\n`);\n\n    if (totalLeads > 1000) {\n      console.log(`✅ FOUND YOUR ~2K LEADS!`);\n    }\n\n    // Get sample leads",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-dialer-app-user.js",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 54,
          "position": 67
        },
        "endLoc": {
          "line": 23,
          "column": 20,
          "position": 153
        }
      },
      "secondFile": {
        "name": "server/scripts/analysis/check-real-database.js",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 5,
          "position": 74
        },
        "endLoc": {
          "line": 26,
          "column": 20,
          "position": 160
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": "const sampleLeads = await db\n      .collection(\"leads\")\n      .find({})\n      .limit(5)\n      .toArray();\n    console.log(\"\\nSample leads:\");\n    sampleLeads.forEach((lead) => {\n      console.log(`  - ${lead.name} (${lead.phone}) - Status: ",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-dialer-app-user.js",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 5,
          "position": 156
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 234
        }
      },
      "secondFile": {
        "name": "server/scripts/tests/test-linkpellow-user.js",
        "start": 34,
        "end": 42,
        "startLoc": {
          "line": 34,
          "column": 5,
          "position": 238
        },
        "endLoc": {
          "line": 42,
          "column": 14,
          "position": 318
        }
      }
    },
    {
      "format": "javascript",
      "lines": 19,
      "fragment": "}`);\n    });\n\n    // Check users\n    const users = await db.collection(\"users\").find({}).toArray();\n    console.log(`\\nUsers in database: ${users.length}`);\n    users.forEach((user) => {\n      console.log(`  - ${user.email} (${user.name})`);\n    });\n\n    await mongoose.disconnect();\n    console.log(\"\\nDisconnected from MongoDB\");\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    process.exit(1);\n  }\n}\n\ncheckDialerAppUser",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-dialer-app-user.js",
        "start": 31,
        "end": 49,
        "startLoc": {
          "line": 31,
          "column": 7,
          "position": 239
        },
        "endLoc": {
          "line": 49,
          "column": 19,
          "position": 394
        }
      },
      "secondFile": {
        "name": "server/scripts/tests/test-dialer-app-user.js",
        "start": 39,
        "end": 69,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 290
        },
        "endLoc": {
          "line": 69,
          "column": 18,
          "position": 585
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "const leadsByStatus = await db\n      .collection(\"leads\")\n      .aggregate([\n        { $group: { _id: \"$status\", count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ])\n      .toArray();\n\n    console.log(\"Leads by status:\");\n    leadsByStatus.forEach((status) => {\n      console.log(`  - ${status._id || \"No status\"}: ${status.count} leads`);\n    });\n\n    // Check if there are more leads with different filters",
      "tokens": 0,
      "firstFile": {
        "name": "server/scripts/analysis/check-dialer-app-full.js",
        "start": 18,
        "end": 31,
        "startLoc": {
          "line": 18,
          "column": 5,
          "position": 117
        },
        "endLoc": {
          "line": 31,
          "column": 56,
          "position": 255
        }
      },
      "secondFile": {
        "name": "server/scripts/analysis/check-real-database.js",
        "start": 27,
        "end": 40,
        "startLoc": {
          "line": 27,
          "column": 5,
          "position": 163
        },
        "endLoc": {
          "line": 40,
          "column": 17,
          "position": 301
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "city?: string;\n  street1?: string;\n  street2?: string;\n  householdSize?: string;\n  householdIncome?: string;\n  military?: boolean;\n  pregnant?: boolean;\n  tobaccoUser?: boolean;\n  hasPrescription?: boolean;\n  hasMedicarePartsAB?: boolean;\n  hasMedicalCondition?: boolean;\n  medicalConditions?: string[];\n  insuranceTimeframe?: string;\n  campaignName",
      "tokens": 0,
      "firstFile": {
        "name": "client/src/types/queryTypes.ts",
        "start": 82,
        "end": 95,
        "startLoc": {
          "line": 82,
          "column": 3,
          "position": 495
        },
        "endLoc": {
          "line": 95,
          "column": 13,
          "position": 601
        }
      },
      "secondFile": {
        "name": "server/src/models/Lead.ts",
        "start": 31,
        "end": 159,
        "startLoc": {
          "line": 31,
          "column": 3,
          "position": 239
        },
        "endLoc": {
          "line": 159,
          "column": 19,
          "position": 932
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "sortDirection,\n              ...getStateParams(selectedStates),\n              dispositions:\n                selectedDispositions.length > 0\n                  ? selectedDispositions.join(\",\")\n                  : undefined,\n              pipelineSource:\n                selectedPipeline === \"all\"\n                  ? \"All\"\n                  : selectedPipeline === \"nextgen\"\n                    ? \"NextGen\"\n                    : selectedPipeline === \"marketplace\"\n                      ? \"Marketplace\"\n                      : selectedPipeline === \"selfgen\"\n                        ? \"Self Generated\"\n                        : \"All\",\n            },\n            signal: controller.signal,\n          })\n          .then((response) => {\n            if (controller.signal.aborted) return;\n\n            console",
      "tokens": 0,
      "firstFile": {
        "name": "client/src/hooks/useLeadsSearchIntegration.ts",
        "start": 145,
        "end": 167,
        "startLoc": {
          "line": 145,
          "column": 15,
          "position": 1029
        },
        "endLoc": {
          "line": 167,
          "column": 8,
          "position": 1178
        }
      },
      "secondFile": {
        "name": "client/src/hooks/useLeadsSearchIntegration.ts",
        "start": 85,
        "end": 107,
        "startLoc": {
          "line": 85,
          "column": 15,
          "position": 594
        },
        "endLoc": {
          "line": 107,
          "column": 9,
          "position": 743
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": "Object.keys(documentsByClient).forEach((clientId) => {\n        documentsByClient[clientId] = documentsByClient[clientId].filter(\n          (doc) => !doc.fileUrl.endsWith(filename),\n        );\n      });\n    }\n  } catch (err) {\n    console.error(\"Error deleting by filename:\"",
      "tokens": 0,
      "firstFile": {
        "name": "server/services/file-service.js",
        "start": 267,
        "end": 274,
        "startLoc": {
          "line": 267,
          "column": 7,
          "position": 2061
        },
        "endLoc": {
          "line": 274,
          "column": 30,
          "position": 2140
        }
      },
      "secondFile": {
        "name": "server/services/file-service.js",
        "start": 233,
        "end": 240,
        "startLoc": {
          "line": 233,
          "column": 9,
          "position": 1790
        },
        "endLoc": {
          "line": 240,
          "column": 38,
          "position": 1869
        }
      }
    },
    {
      "format": "javascript",
      "lines": 280,
      "fragment": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\n// Create a standalone app just for uploads\nconst app = express();\nconst PORT = 3002; // Use different port to avoid conflicts\n\n// Enable CORS with credentials - expanded to accept more origins\napp.use(\n  cors({\n    origin: [\n      \"http://localhost:5173\",\n      \"http://127.0.0.1:5173\",\n      \"http://localhost:3000\",\n      \"http://127.0.0.1:3000\",\n      \"http://localhost:3001\",\n      \"http://127.0.0.1:3001\",\n    ],\n    credentials: true,\n  }),\n);\n\napp.use(express.json());\n\n// In-memory storage for documents (by client)\nconst documentsByClient = {};\n\n// Set to track deleted document IDs\nconst deletedDocumentIds = new Set();\n\n// Create uploads directory\nconst uploadDir = path.join(__dirname, \"uploads\");\nconst documentUploadDir = path.join(uploadDir, \"documents\");\nif (!fs.existsSync(documentUploadDir)) {\n  fs.mkdirSync(documentUploadDir, { recursive: true });\n}\n\n// Configure multer\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, documentUploadDir);\n  },\n  filename: function (req, file, cb) {\n    const fileExt = path.extname(file.originalname);\n    const fileName = `${uuidv4()}${fileExt}`;\n    cb(null, fileName);\n  },\n});\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: function (req, file, cb) {\n    // Accept only PDF files\n    if (file.mimetype === \"application/pdf\") {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only PDF files are allowed\"), false);\n    }\n  },\n});\n\n// Document upload endpoint\napp.post(\"/api/documents/upload\", upload.single(\"file\"), (req, res) => {\n  try {\n    console.log(\"Upload received:\", req.file);\n\n    if (!req.file) {\n      return res.status(400).json({ error: \"No file uploaded\" });\n    }\n\n    const clientId = req.body.clientId || \"unknown\";\n    const documentId = uuidv4();\n    const fileUrl = `http://localhost:${PORT}/uploads/documents/${req.file.filename}`;\n\n    // Create document object\n    const document = {\n      _id: documentId,\n      clientId: clientId,\n      fileName: req.file.originalname,\n      fileSize: req.file.size,\n      fileType: req.file.mimetype,\n      uploadDate: new Date(),\n      fileUrl: fileUrl,\n    };\n\n    // Store document in memory\n    if (!documentsByClient[clientId]) {\n      documentsByClient[clientId] = [];\n    }\n    documentsByClient[clientId].push(document);\n\n    // Return success response\n    return res.status(201).json({\n      message: \"Document uploaded successfully\",\n      document: document,\n    });\n  } catch (error) {\n    console.error(\"Error uploading document:\", error);\n    return res.status(500).json({ error: \"Failed to upload document\" });\n  }\n});\n\n// Document list endpoint\napp.get(\"/api/documents/client/:clientId\", (req, res) => {\n  const clientId = req.params.clientId;\n\n  // Get documents for the client from memory\n  const documents = documentsByClient[clientId] || [];\n\n  // Filter out any deleted documents\n  const filteredDocuments = documents.filter(\n    (doc) => !deletedDocumentIds.has(doc._id),\n  );\n\n  res.json({ documents: filteredDocuments });\n});\n\n// List all uploads endpoint\napp.get(\"/list-uploads\", (req, res) => {\n  try {\n    // Read uploads directory\n    const files = fs.readdirSync(documentUploadDir);\n\n    // Get file details\n    const fileDetails = files\n      .filter((filename) => filename.endsWith(\".pdf\"))\n      .map((filename) => {\n        const filePath = path.join(documentUploadDir, filename);\n        const stats = fs.statSync(filePath);\n\n        // Extract document ID from filename\n        const docId = filename.split(\".\")[0];\n\n        // Skip if this document ID is in the deleted set\n        if (deletedDocumentIds.has(docId)) {\n          return null;\n        }\n\n        return {\n          filename,\n          originalname: `Health Insurance Document.pdf`,\n          size: stats.size,\n          mtime: stats.mtime.toISOString(),\n          path: filePath,\n        };\n      })\n      .filter((file) => file !== null); // Remove null entries (deleted docs)\n\n    res.json({ documents: fileDetails });\n  } catch (error) {\n    console.error(\"Error listing uploads:\", error);\n    res.status(500).json({ error: \"Failed to list uploads\" });\n  }\n});\n\n// Check if a document is deleted\napp.get(\"/api/documents/isDeleted/:documentId\", (req, res) => {\n  const documentId = req.params.documentId;\n  const isDeleted = deletedDocumentIds.has(documentId);\n  res.json({ isDeleted });\n});\n\n// Document delete endpoint\napp.delete(\"/api/documents/:documentId\", (req, res) => {\n  const documentId = req.params.documentId;\n  let found = false;\n\n  // First add to the deleted documents set\n  deletedDocumentIds.add(documentId);\n\n  // Find and remove the document by ID from in-memory storage\n  Object.keys(documentsByClient).forEach((clientId) => {\n    const clientDocs = documentsByClient[clientId];\n    const docIndex = clientDocs.findIndex((doc) => doc._id === documentId);\n\n    if (docIndex >= 0) {\n      // Get the document to delete its file\n      const doc = clientDocs[docIndex];\n      const filePath = path.join(documentUploadDir, path.basename(doc.fileUrl));\n\n      // Remove from array\n      clientDocs.splice(docIndex, 1);\n      found = true;\n\n      // Delete the file if it exists\n      try {\n        if (fs.existsSync(filePath)) {\n          fs.unlinkSync(filePath);\n          console.log(`Deleted file at ${filePath}`);\n        }\n      } catch (err) {\n        console.error(\"Error deleting file:\", err);\n      }\n    }\n  });\n\n  // If not found by ID, check if the document ID is actually a filename\n  if (!found) {\n    try {\n      // Normalize the document ID in case it's a filename\n      let filename = documentId;\n      if (!filename.endsWith(\".pdf\")) {\n        filename = `${filename}.pdf`;\n      }\n\n      // Check if file exists\n      const filePath = path.join(documentUploadDir, filename);\n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n        found = true;\n        console.log(`Deleted file by filename: ${filename}`);\n\n        // Also remove from in-memory storage if found\n        Object.keys(documentsByClient).forEach((clientId) => {\n          documentsByClient[clientId] = documentsByClient[clientId].filter(\n            (doc) => !doc.fileUrl.endsWith(filename),\n          );\n        });\n      }\n    } catch (err) {\n      console.error(\"Error trying to delete by filename:\", err);\n    }\n  }\n\n  // Even if not found, respond as if successful\n  // This helps with idempotent delete operations\n  res.json({ message: \"Document deleted successfully\" });\n});\n\n// Add a new endpoint to delete by filename for cross-server compatibility\napp.delete(\"/api/documents/byname/:filename\", (req, res) => {\n  const filename = req.params.filename;\n  let found = false;\n\n  // Extract document ID from filename and add to deleted set\n  const docId = filename.split(\".\")[0];\n  deletedDocumentIds.add(docId);\n\n  try {\n    // Check if file exists\n    const filePath = path.join(documentUploadDir, filename);\n    if (fs.existsSync(filePath)) {\n      fs.unlinkSync(filePath);\n      found = true;\n      console.log(`Deleted file by filename: ${filename}`);\n\n      // Also remove from in-memory storage\n      Object.keys(documentsByClient).forEach((clientId) => {\n        documentsByClient[clientId] = documentsByClient[clientId].filter(\n          (doc) => !doc.fileUrl.endsWith(filename),\n        );\n      });\n    }\n  } catch (err) {\n    console.error(\"Error deleting by filename:\", err);\n  }\n\n  // Even if not found, respond as if successful\n  res.json({ message: \"Document deleted successfully by filename\" });\n});\n\n// Serve static files from uploads directory\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\n\n// Add health check endpoint\napp.get(\"/health\", (req, res) => {\n  res.json({ status: \"ok\", timestamp: new Date() });\n});\n\n// Start the upload server\napp.listen(PORT, () => {\n  console.log(`Document upload server running on port ${PORT}`);\n});",
      "tokens": 0,
      "firstFile": {
        "name": "server/dev-tools/upload-server.js",
        "start": 1,
        "end": 280,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 280,
          "column": 2,
          "position": 2281
        }
      },
      "secondFile": {
        "name": "server/services/file-service.js",
        "start": 13,
        "end": 292,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 292,
          "column": 2,
          "position": 2284
        }
      }
    },
    {
      "format": "javascript",
      "lines": 8,
      "fragment": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\n// Simple upload server",
      "tokens": 0,
      "firstFile": {
        "name": "server/dev-tools/simple-upload.js",
        "start": 1,
        "end": 8,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 8,
          "column": 24,
          "position": 80
        }
      },
      "secondFile": {
        "name": "server/services/file-service.js",
        "start": 13,
        "end": 20,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 20,
          "column": 44,
          "position": 83
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "const storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, documentUploadDir);\n  },\n  filename: function (req, file, cb) {\n    const fileExt = path.extname(file.originalname);\n    const fileName = `${uuidv4()}${fileExt}`;\n    cb(null, fileName);\n  },\n});\n\n// Configure multer upload",
      "tokens": 0,
      "firstFile": {
        "name": "server/dev-tools/simple-upload.js",
        "start": 32,
        "end": 43,
        "startLoc": {
          "line": 32,
          "column": 1,
          "position": 239
        },
        "endLoc": {
          "line": 43,
          "column": 27,
          "position": 356
        }
      },
      "secondFile": {
        "name": "server/services/file-service.js",
        "start": 55,
        "end": 66,
        "startLoc": {
          "line": 55,
          "column": 1,
          "position": 286
        },
        "endLoc": {
          "line": 66,
          "column": 6,
          "position": 403
        }
      }
    },
    {
      "format": "javascript",
      "lines": 20,
      "fragment": ");\n\n// Document upload endpoint\napp.post(\"/api/documents/upload\", upload.single(\"file\"), (req, res) => {\n  try {\n    console.log(\"Upload received:\", req.file);\n\n    if (!req.file) {\n      return res.status(400).json({ error: \"No file uploaded\" });\n    }\n\n    const clientId = req.body.clientId || \"unknown\";\n    const documentId = uuidv4();\n    const fileUrl = `http://localhost:${PORT}/uploads/documents/${req.file.filename}`;\n\n    // Create document object\n    const document = {\n      _id: documentId,\n      clientId: clientId,\n      fileName: req.file.originalname ||",
      "tokens": 0,
      "firstFile": {
        "name": "server/dev-tools/simple-upload.js",
        "start": 55,
        "end": 74,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 432
        },
        "endLoc": {
          "line": 74,
          "column": 3,
          "position": 612
        }
      },
      "secondFile": {
        "name": "server/services/file-service.js",
        "start": 79,
        "end": 98,
        "startLoc": {
          "line": 79,
          "column": 2,
          "position": 523
        },
        "endLoc": {
          "line": 98,
          "column": 2,
          "position": 702
        }
      }
    },
    {
      "format": "javascript",
      "lines": 17,
      "fragment": "document);\n\n    // Return success response\n    return res.status(201).json({\n      message: \"Document uploaded successfully\",\n      document: document,\n    });\n  } catch (error) {\n    console.error(\"Error uploading document:\", error);\n    return res.status(500).json({ error: \"Failed to upload document\" });\n  }\n});\n\n// Document list endpoint\napp.get(\"/api/documents/client/:clientId\", (req, res) => {\n  const clientId = req.params.clientId;\n  const",
      "tokens": 0,
      "firstFile": {
        "name": "server/dev-tools/simple-upload.js",
        "start": 84,
        "end": 100,
        "startLoc": {
          "line": 84,
          "column": 2,
          "position": 691
        },
        "endLoc": {
          "line": 100,
          "column": 6,
          "position": 821
        }
      },
      "secondFile": {
        "name": "server/services/file-service.js",
        "start": 109,
        "end": 126,
        "startLoc": {
          "line": 109,
          "column": 2,
          "position": 788
        },
        "endLoc": {
          "line": 126,
          "column": 44,
          "position": 919
        }
      }
    },
    {
      "format": "javascript",
      "lines": 23,
      "fragment": "sortDirection,\n            ...getStateParams(selectedStates),\n            dispositions:\n              selectedDispositions.length > 0\n                ? selectedDispositions.join(\",\")\n                : undefined,\n            pipelineSource:\n              selectedPipeline === \"all\"\n                ? \"All\"\n                : selectedPipeline === \"nextgen\"\n                  ? \"NextGen\"\n                  : selectedPipeline === \"marketplace\"\n                    ? \"Marketplace\"\n                    : selectedPipeline === \"selfgen\"\n                      ? \"Self Generated\"\n                      : \"All\",\n          },\n          signal: abortController.signal,\n        })\n        .then((response) => {\n          if (abortController.signal.aborted) return;\n\n          console",
      "tokens": 0,
      "firstFile": {
        "name": "CORRECTED_SEARCH_EFFECT.js",
        "start": 70,
        "end": 92,
        "startLoc": {
          "line": 70,
          "column": 13,
          "position": 502
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 651
        }
      },
      "secondFile": {
        "name": "CORRECTED_SEARCH_EFFECT.js",
        "start": 22,
        "end": 44,
        "startLoc": {
          "line": 22,
          "column": 15,
          "position": 131
        },
        "endLoc": {
          "line": 44,
          "column": 9,
          "position": 280
        }
      }
    }
  ],
  "filename": "/Users/linkp/.nvm/versions/node/v18.20.8/lib/node_modules/jscpd/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}