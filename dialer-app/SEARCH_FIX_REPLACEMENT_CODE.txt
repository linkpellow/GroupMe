// Server-side search effect - searches ALL leads in database
useEffect(() => {
  // Abort controller for cancelling in-flight requests
  const abortController = new AbortController();
  
  // Debounce the search to avoid rapid API calls
  const debounceTimeout = setTimeout(() => {
    // If search is empty, return to normal pagination
    if (!searchQuery.trim()) {
      if (isSearching) {
        setIsSearching(false);
        
        // Fetch normal paginated results
        console.log('Exiting search mode, fetching regular data');
        setIsLoading(true);
        
        // Fetch current page without search
        axiosInstance.get('/api/leads', {
          params: {
            page: currentPage,
            sortDirection,
            ...getStateParams(selectedStates),
            dispositions: selectedDispositions.length > 0 ? selectedDispositions.join(',') : undefined,
            pipelineSource: selectedPipeline === 'all' ? 'All' : 
                          selectedPipeline === 'nextgen' ? 'NextGen' : 
                          selectedPipeline === 'marketplace' ? 'Marketplace' : 
                          selectedPipeline === 'selfgen' ? 'Self Generated' : 'All'
          },
          signal: abortController.signal
        })
        .then(response => {
          if (abortController.signal.aborted) return;
          
          setLeads(response.data.leads || []);
          setTotalLeads(response.data.pagination.total || 0);
          setTotalPages(response.data.pagination.pages || 1);
          setFilteredLeads(response.data.leads || []);
          setIsLoading(false);
        })
        .catch(err => {
          if (err.name === 'AbortError') return;
          console.error('Failed to reset search results:', err);
          setIsLoading(false);
        });
      }
    } else {
      // Set searching state
      setIsSearching(true);
      setIsLoading(true);
      
      console.log('🔍 SERVER SEARCH: Searching for:', searchQuery);
      
      // CRITICAL CHANGE: Use server-side search instead of getAllResults
      axiosInstance.get('/api/leads', {
        params: {
          search: searchQuery.trim(), // ✅ Send search to backend
          page: 1, // Always start at page 1 for new search
          limit: 50, // Normal pagination limit
          sortDirection,
          ...getStateParams(selectedStates),
          dispositions: selectedDispositions.length > 0 ? selectedDispositions.join(',') : undefined,
          pipelineSource: selectedPipeline === 'all' ? 'All' : 
                         selectedPipeline === 'nextgen' ? 'NextGen' : 
                         selectedPipeline === 'marketplace' ? 'Marketplace' : 
                         selectedPipeline === 'selfgen' ? 'Self Generated' : 'All'
        },
        signal: abortController.signal
      })
      .then(response => {
        if (abortController.signal.aborted) return;
        
        console.log(`✅ SERVER SEARCH: Found ${response.data.pagination.total} total matches for "${searchQuery}"`);
        console.log(`📄 Showing page 1 with ${response.data.leads?.length || 0} leads`);
        
        // Update both leads and filteredLeads with server results
        setLeads(response.data.leads || []);
        setFilteredLeads(response.data.leads || []);
        
        // Update counts from server response
        setTotalLeads(response.data.pagination.total || 0);
        setTotalPages(response.data.pagination.pages || 1);
        setCurrentPage(1); // Reset to page 1
        setIsLoading(false);
        
        // Show toast if no results
        if (response.data.pagination.total === 0) {
          toast({
            title: 'No results found',
            description: `No leads found matching "${searchQuery}"`,
            status: 'info',
            duration: 2000,
            isClosable: true,
          });
        }
      })
      .catch(err => {
        if (err.name === 'AbortError') return;
        
        console.error('Search failed:', err);
        toast({
          title: 'Search Error',
          description: 'Failed to search leads. Please try again.',
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
        setIsLoading(false);
      });
    }
  }, 300); // 300ms debounce
  
  // Cleanup function
  return () => {
    clearTimeout(debounceTimeout);
    abortController.abort();
  };
}, [searchQuery, sortDirection, selectedStates, selectedDispositions, selectedPipeline, currentPage, isSearching]); 